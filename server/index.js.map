{
  "version": 3,
  "sources": ["../node_modules/@remix-run/dev/dist/compiler/shims/react.ts", "../mocks/index.js", "../server.ts", "server-entry-module:@remix-run/dev/server-build", "../app/entry.server.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/root.tsx", "../app/services/session.server.ts", "../app/models/user.server.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/bookmarks/index.tsx", "../app/services/twitter.server.ts", "../app/utils.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/login.callback.tsx", "../app/services/auth.server.ts", "../app/auth/TwitterOAuth2Strategy.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/dashboard.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/translate.tsx", "../app/services/translator.server.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/translate/$translateId.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/logout.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/index.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/login.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/notes.tsx", "../app/models/note.server.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/notes/$noteId.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/notes/index.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/notes/new.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/join.tsx", "/Users/aowusu-ansah/Work/twitterlingo/cypress/support/test-routes/create-user.ts", "server-assets-manifest:@remix-run/dev/assets-manifest"],
  "sourcesContent": ["// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "const { setupServer } = require(\"msw/node\");\n\nconst server = setupServer();\n\nserver.listen({ onUnhandledRequest: \"bypass\" });\n\nprocess.once(\"SIGINT\", () => server.close());\nprocess.once(\"SIGTERM\", () => server.close());\n", "import { createRequestHandler } from \"@remix-run/architect\";\nimport * as build from \"@remix-run/dev/server-build\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  require(\"./mocks\");\n}\n\nexport const handler = createRequestHandler({\n  build,\n  mode: process.env.NODE_ENV,\n});\n", "\nimport * as entryServer from \"/Users/aowusu-ansah/Work/twitterlingo/app/entry.server.tsx\";\nimport * as route0 from \"/Users/aowusu-ansah/Work/twitterlingo/app/root.tsx\";\nimport * as route1 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/bookmarks/index.tsx\";\nimport * as route2 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/login.callback.tsx\";\nimport * as route3 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/dashboard.tsx\";\nimport * as route4 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/translate.tsx\";\nimport * as route5 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/translate/$translateId.tsx\";\nimport * as route6 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/logout.tsx\";\nimport * as route7 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/index.tsx\";\nimport * as route8 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/login.tsx\";\nimport * as route9 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/notes.tsx\";\nimport * as route10 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/notes/$noteId.tsx\";\nimport * as route11 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/notes/index.tsx\";\nimport * as route12 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/notes/new.tsx\";\nimport * as route13 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/join.tsx\";\nimport * as route14 from \"/Users/aowusu-ansah/Work/twitterlingo/cypress/support/test-routes/create-user.ts\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/bookmarks/index\": {\n      id: \"routes/bookmarks/index\",\n      parentId: \"root\",\n      path: \"bookmarks\",\n      index: true,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/login.callback\": {\n      id: \"routes/login.callback\",\n      parentId: \"root\",\n      path: \"login/callback\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/dashboard\": {\n      id: \"routes/dashboard\",\n      parentId: \"root\",\n      path: \"dashboard\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/translate\": {\n      id: \"routes/translate\",\n      parentId: \"root\",\n      path: \"translate\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/translate/$translateId\": {\n      id: \"routes/translate/$translateId\",\n      parentId: \"routes/translate\",\n      path: \":translateId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/notes\": {\n      id: \"routes/notes\",\n      parentId: \"root\",\n      path: \"notes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/notes/$noteId\": {\n      id: \"routes/notes/$noteId\",\n      parentId: \"routes/notes\",\n      path: \":noteId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    },\n  \"routes/notes/index\": {\n      id: \"routes/notes/index\",\n      parentId: \"routes/notes\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route11\n    },\n  \"routes/notes/new\": {\n      id: \"routes/notes/new\",\n      parentId: \"routes/notes\",\n      path: \"new\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route12\n    },\n  \"routes/join\": {\n      id: \"routes/join\",\n      parentId: \"root\",\n      path: \"join\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route13\n    },\n  \"/Users/aowusu-ansah/Work/twitterlingo/cypress/support/test-routes/create-user\": {\n      id: \"/Users/aowusu-ansah/Work/twitterlingo/cypress/support/test-routes/create-user\",\n      parentId: \"root\",\n      path: \"__tests/create-user\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route14\n    }\n  };", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type {\n  LinksFunction,\n  LoaderFunction,\n  MetaFunction,\n} from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nimport tailwindStylesheetUrl from \"./styles/tailwind.css\";\nimport { getUser } from \"./services/session.server\";\n\nexport const links: LinksFunction = () => {\n  return [\n    { rel: \"stylesheet\", href: tailwindStylesheetUrl },\n    // NOTE: Architect deploys the public directory to /_static/\n    { rel: \"icon\", href: \"/_static/favicon.ico\" },\n  ];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Remix Notes\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\ntype LoaderData = {\n  user: Awaited<ReturnType<typeof getUser>>;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  return json<LoaderData>({\n    user: await getUser(request),\n  });\n};\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full\">\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { createCookieSessionStorage } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { redirect } from \"@remix-run/node\";\n\nimport type { SessionUser } from \"~/models/user.server\";\nimport { getUserById } from \"~/models/user.server\";\n\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set\");\n\n// export the whole sessionStorage object\nexport let sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"_session\", // use any name you want here\n    sameSite: \"lax\", // this helps with CSRF\n    path: \"/\", // remember to add this so the cookie will work in all routes\n    httpOnly: true, // for security reasons, make this cookie http only\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === \"production\", // enable this in prod only\n  },\n});\n\n// you can also export the methods individually for your own usage\nexport let { commitSession, destroySession } = sessionStorage;\n\nconst USER_SESSION_KEY = \"user\";\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function getSessionUser(\n  request: Request\n): Promise<SessionUser | undefined> {\n  const session = await getSession(request);\n  const user = session.get(USER_SESSION_KEY);\n  return user;\n}\n\nexport async function getUser(request: Request) {\n  const user = await getSessionUser(request);\n\n  if (user === undefined) return null;\n\n  const dbUser = await getUserById(user.id);\n\n  if (dbUser) {\n    return user;\n  }\n\n  throw await logout(request);\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const user = await getSessionUser(request);\n  if (!user) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return user.id;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  const session = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(session, {\n        maxAge: remember\n          ? 60 * 60 * 24 * 7 // 7 days\n          : undefined,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}\n", "import arc from \"@architect/functions\";\nimport bcrypt from \"bcryptjs\";\nimport invariant from \"tiny-invariant\";\nimport type { OAuth2Profile } from \"~/auth/TwitterOAuth2Strategy\";\n\nexport type User = {\n  id: string;\n  email: string;\n};\n\nexport interface SessionUser extends User {\n  accessToken: string;\n  profile: OAuth2Profile;\n}\n\nexport type Password = { password: string };\n\nexport async function getUserById(id: User[\"id\"]): Promise<User | null> {\n  const db = await arc.tables();\n  const result = await db.user.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": id },\n  });\n\n  const [record] = result.Items;\n  if (record) {\n    return {\n      id: record.pk,\n      email: record.email,\n    };\n  }\n  return null;\n}\n\nexport async function getUserByEmail(email: User[\"email\"]) {\n  return getUserById(`email#${email}`);\n}\n\nasync function getUserPasswordByEmail(email: User[\"email\"]) {\n  const db = await arc.tables();\n  const result = await db.password.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": `email#${email}` },\n  });\n\n  const [record] = result.Items;\n\n  if (record) return { hash: record.password };\n  return null;\n}\n\nexport async function createUser(\n  email: User[\"email\"],\n  password: Password[\"password\"]\n) {\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const db = await arc.tables();\n  await db.password.put({\n    pk: `email#${email}`,\n    password: hashedPassword,\n  });\n\n  await db.user.put({\n    pk: `email#${email}`,\n    email,\n  });\n\n  const user = await getUserByEmail(email);\n  invariant(user, `User not found after being created. This should not happen`);\n\n  return user;\n}\n\nexport async function createTwitterUser({\n  profile,\n}: {\n  profile: OAuth2Profile;\n}) {\n  const db = await arc.tables();\n\n  await db.user.put({\n    pk: `id#${profile.id}`,\n    email: \"\",\n  });\n\n  const user = await getUserById(`id#${profile.id}`);\n  invariant(user, `User not found after being created. This should not happen`);\n\n  return user;\n}\n\nexport async function findOrCreateFromTwitter({\n  profile,\n  accessToken,\n}: {\n  profile: OAuth2Profile;\n  accessToken: string;\n}) {\n  function getUserData(user: User): SessionUser {\n    return {\n      ...user,\n      accessToken,\n      profile,\n    };\n  }\n\n  let user = await getUserById(`id#${profile.id}`);\n\n  if (user) {\n    return getUserData(user);\n  } else {\n    const newUser = await createTwitterUser({\n      profile,\n    });\n    return getUserData(newUser);\n  }\n}\n\nexport async function deleteUser(email: User[\"email\"]) {\n  const db = await arc.tables();\n  await db.password.delete({ pk: `email#${email}` });\n  await db.user.delete({ pk: `email#${email}` });\n}\n\nexport async function verifyLogin(\n  email: User[\"email\"],\n  password: Password[\"password\"]\n) {\n  const userPassword = await getUserPasswordByEmail(email);\n\n  if (!userPassword) {\n    return undefined;\n  }\n\n  const isValid = await bcrypt.compare(password, userPassword.hash);\n  if (!isValid) {\n    return undefined;\n  }\n\n  return getUserByEmail(email);\n}\n", "import type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Link, Outlet, useLoaderData } from \"@remix-run/react\";\n\nimport { getUser } from \"~/services/session.server\";\nimport { getBookmarksByUser } from \"~/services/twitter.server\";\nimport { useUser } from \"~/utils\";\n\ntype LoaderData = {\n  bookmarks: Awaited<ReturnType<typeof getBookmarksByUser>>;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request);\n  const bookmarks = await getBookmarksByUser(user!.id, user!.accessToken);\n  return json<LoaderData>(bookmarks);\n};\n\nexport default function BookmarksPage() {\n  const data = useLoaderData() as LoaderData;\n  const user = useUser();\n\n  console.log(JSON.stringify(data))\n\n  return (\n    <div className=\"flex h-full min-h-screen flex-col\">\n      <header className=\"flex items-center justify-between bg-slate-800 p-4 text-white\">\n        <h1 className=\"text-3xl font-bold\">\n          <Link to=\".\">Bookmarks</Link>\n        </h1>\n      </header>\n\n      <main className=\"flex h-full bg-white\">\n        <div className=\"h-full w-80 border-r bg-gray-50\">hello</div>\n\n        <div className=\"flex-1 p-6\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n}\n", "import type { SessionUser } from \"~/models/user.server\"\n\ninterface TwitterBookmark {\n  id: string;\n  lang: string;\n  text: string;\n}\n\ninterface TwitterBookmarkResponse {\n  data: TwitterBookmark[];\n  result_count: number;\n}\n\nexport async function getBookmarksByUser(userId: SessionUser['id'], accessToken: string): Promise<TwitterBookmarkResponse> {\n    const url = new URL(`https://api.twitter.com/2/users/${userId.replace('id#', '')}/bookmarks?tweet.fields=lang&user.fields=profile_image_url,name`)\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`\n      }\n    })\n\n    const json: TwitterBookmarkResponse = await response.json()\n\n    return json\n}", "import { useMatches } from \"@remix-run/react\";\nimport { useMemo } from \"react\";\n\nimport type { SessionUser } from \"~/models/user.server\";\n\nconst DEFAULT_REDIRECT = \"/\";\n\n/**\n * This should be used any time the redirect path is user-provided\n * (Like the query string on our login/signup pages). This avoids\n * open-redirect vulnerabilities.\n * @param {string} to The redirect destination\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\n */\nexport function safeRedirect(\n  to: FormDataEntryValue | string | null | undefined,\n  defaultRedirect: string = DEFAULT_REDIRECT\n) {\n  if (!to || typeof to !== \"string\") {\n    return defaultRedirect;\n  }\n\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\n    return defaultRedirect;\n  }\n\n  return to;\n}\n\n/**\n * This base hook is used in other hooks to quickly search for specific data\n * across all loader data using useMatches.\n * @param {string} id The route id\n * @returns {JSON|undefined} The router data or undefined if not found\n */\nexport function useMatchesData(\n  id: string\n): Record<string, unknown> | undefined {\n  const matchingRoutes = useMatches();\n  const route = useMemo(\n    () => matchingRoutes.find((route) => route.id === id),\n    [matchingRoutes, id]\n  );\n  return route?.data;\n}\n\nfunction isUser(user: any): user is SessionUser {\n  return user && typeof user === \"object\" && typeof user.id === \"string\";\n}\n\nexport function useOptionalUser(): SessionUser | undefined {\n  const data = useMatchesData(\"root\");\n  if (!data || !isUser(data.user)) {\n    return undefined;\n  }\n  return data.user;\n}\n\nexport function useUser(): SessionUser {\n  const maybeUser = useOptionalUser();\n  if (!maybeUser) {\n    throw new Error(\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\"\n    );\n  }\n  return maybeUser;\n}\n\nexport function validateEmail(email: unknown): email is string {\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\n}\n", "// app/routes/login.callback.tsx\nimport type { LoaderFunction } from \"@remix-run/node\";\nimport { authenticator } from \"~/services/auth.server\";\n\n// This will be called after twitter auth page\nexport let loader: LoaderFunction = async ({ request }) => {\n  await authenticator.authenticate(\"twitter\", request, {\n    successRedirect: \"/bookmarks\",\n    failureRedirect: \"/login/failure\",\n  });\n};\n", "// app/services/auth.server.ts\nimport { Authenticator } from \"remix-auth\";\nimport { TwitterOAuth2Strategy } from \"~/auth/TwitterOAuth2Strategy\";\nimport type { User } from \"~/models/user.server\";\nimport { findOrCreateFromTwitter } from \"~/models/user.server\";\nimport { sessionStorage } from \"~/services/session.server\";\n\n// Create an instance of the authenticator, pass a generic with what\n// strategies will return and will store in the session\nexport let authenticator = new Authenticator<User>(sessionStorage);\n\nconst clientID = process.env.TWITTER_CONSUMER_KEY;\nconst clientSecret = process.env.TWITTER_CONSUMER_SECRET;\n\nif (!clientID || !clientSecret) {\n  throw new Error(\n    \"TWITTER_CONSUMER_KEY and TWITTER_CONSUMER_SECRET must be provided\"\n  );\n}\n\nauthenticator.use(\n  new TwitterOAuth2Strategy(\n    {\n      authorizationURL: \"https://twitter.com/i/oauth2/authorize\",\n      tokenURL: \"https://api.twitter.com/2/oauth2/token\",\n      clientID,\n      clientSecret,\n      callbackURL: \"http://localhost:3000/login/callback\",\n      scope: 'bookmark.read tweet.read users.read'\n    },\n    async ({ accessToken, refreshToken, profile }) => {\n      return await findOrCreateFromTwitter({\n        profile: profile,\n        accessToken,\n      });\n    },\n  ),\n  // each strategy has a name and can be changed to use another one\n  // same strategy multiple times, especially useful for the OAuth2 strategy.\n  \"twitter\"\n);\n", "import type {\n  AppLoadContext,\n  SessionStorage} from \"@remix-run/server-runtime\";\nimport {\n  json,\n  redirect\n} from \"@remix-run/server-runtime\";\nimport type {\n  AuthenticateOptions,\n  StrategyVerifyCallback} from \"remix-auth\";\nimport {\n  Strategy\n} from \"remix-auth\";\nimport { v4 as uuid } from \"uuid\";\n\nlet debug = (...val: any) => console.log('debug', ...val)\n\nexport interface OAuth2Profile {\n  provider: string;\n  id?: string;\n  displayName?: string;\n  name?: {\n    familyName?: string;\n    givenName?: string;\n    middleName?: string;\n  };\n  emails?: Array<{\n    value: string;\n    type?: string;\n  }>;\n  photos?: Array<{ value: string }>;\n}\n\nexport interface OAuth2StrategyOptions {\n  authorizationURL: string;\n  tokenURL: string;\n  clientID: string;\n  clientSecret: string;\n  callbackURL: string;\n  scope: string;\n  confidential?: boolean;\n}\n\nexport interface OAuth2StrategyVerifyParams<\n  Profile extends OAuth2Profile,\n  ExtraParams extends Record<string, unknown> = Record<string, never>\n> {\n  accessToken: string;\n  refreshToken: string;\n  extraParams: ExtraParams;\n  profile: Profile;\n  context?: AppLoadContext;\n}\n\n/**\n * The OAuth 2.0 authentication strategy authenticates requests using the OAuth\n * 2.0 framework.\n *\n * OAuth 2.0 provides a facility for delegated authentication, whereby users can\n * authenticate using a third-party service such as Facebook.  Delegating in\n * this manner involves a sequence of events, including redirecting the user to\n * the third-party service for authorization.  Once authorization has been\n * granted, the user is redirected back to the application and an authorization\n * code can be used to obtain credentials.\n *\n * Applications must supply a `verify` callback, for which the function\n * signature is:\n *\n *     function(accessToken, refreshToken, profile) { ... }\n *\n * The verify callback is responsible for finding or creating the user, and\n * returning the resulting user object.\n *\n * An AuthorizationError should be raised to indicate an authentication failure.\n *\n * Options:\n * - `authorizationURL`  URL used to obtain an authorization grant\n * - `tokenURL`          URL used to obtain an access token\n * - `clientID`          identifies client to service provider\n * - `clientSecret`      secret used to establish ownership of the client identifier\n * - `callbackURL`       URL to which the service provider will redirect the user after obtaining authorization\n *\n * @example\n * authenticator.use(new OAuth2Strategy(\n *   {\n *     authorizationURL: 'https://www.example.com/oauth2/authorize',\n *     tokenURL: 'https://www.example.com/oauth2/token',\n *     clientID: '123-456-789',\n *     clientSecret: 'shhh-its-a-secret'\n *     callbackURL: 'https://www.example.net/auth/example/callback'\n *   },\n *   async ({ accessToken, refreshToken, profile }) => {\n *     return await User.findOrCreate(...);\n *   }\n * ));\n */\nexport class TwitterOAuth2Strategy<\n  User,\n  Profile extends OAuth2Profile,\n  ExtraParams extends Record<string, unknown> = Record<string, never>\n> extends Strategy<User, OAuth2StrategyVerifyParams<Profile, ExtraParams>> {\n  name = \"oauth2\";\n\n  protected authorizationURL: string;\n  protected tokenURL: string;\n  protected clientID: string;\n  protected clientSecret: string;\n  protected callbackURL: string;\n  protected scope: string;\n  protected confidential: boolean;\n\n  private sessionStateKey = \"oauth2:state\";\n\n  constructor(\n    options: OAuth2StrategyOptions,\n    verify: StrategyVerifyCallback<\n      User,\n      OAuth2StrategyVerifyParams<Profile, ExtraParams>\n    >\n  ) {\n    super(verify);\n    this.authorizationURL = options.authorizationURL;\n    this.tokenURL = options.tokenURL;\n    this.clientID = options.clientID;\n    this.clientSecret = options.clientSecret;\n    this.callbackURL = options.callbackURL;\n    this.scope = options.scope;\n    this.confidential = options.confidential ?? false;\n  }\n\n  async authenticate(\n    request: Request,\n    sessionStorage: SessionStorage,\n    options: AuthenticateOptions\n  ): Promise<User> {\n    debug(\"Request URL\", request.url);\n    let url = new URL(request.url);\n    let session = await sessionStorage.getSession(\n      request.headers.get(\"Cookie\")\n    );\n\n    let user: User | null = session.get(options.sessionKey) ?? null;\n\n    // User is already authenticated\n    if (user) {\n      debug(\"User is authenticated\");\n      return this.success(user, request, sessionStorage, options);\n    }\n\n    let callbackURL = this.getCallbackURL(url);\n    let challenge = this.generateChallenge();\n\n    debug(\"Callback URL\", callbackURL);\n\n    // Redirect the user to the callback URL\n    if (url.pathname !== callbackURL.pathname) {\n      debug(\"Redirecting to callback URL\");\n      let state = this.generateState();\n      debug(\"State\", state);\n      session.set(this.sessionStateKey, state);\n      throw redirect(this.getAuthorizationURL(request, state, challenge).toString(), {\n        headers: { \n            \"Set-Cookie\": await sessionStorage.commitSession(session),\n            'Authorization': `Basic ${this.getConfidentialHeader()}`\n        },\n      });\n    }\n\n    // Validations of the callback URL params\n\n    let stateUrl = url.searchParams.get(\"state\");\n    debug(\"State from URL\", stateUrl);\n    if (!stateUrl)\n      throw json({ message: \"Missing state on URL.\" }, { status: 400 });\n\n    let stateSession = session.get(this.sessionStateKey);\n    debug(\"State from session\", stateSession);\n    if (!stateSession) {\n      throw json({ message: \"Missing state on session.\" }, { status: 400 });\n    }\n\n    if (stateSession === stateUrl) {\n      debug(\"State is valid\");\n      session.unset(this.sessionStateKey);\n    } else throw json({ message: \"State doesn't match.\" }, { status: 400 });\n\n    let code = url.searchParams.get(\"code\");\n    if (!code) throw json({ message: \"Missing code.\" }, { status: 400 });\n\n    // Get the access token\n\n    let params = new URLSearchParams(this.tokenParams());\n    params.set(\"grant_type\", \"authorization_code\");\n    params.set(\"redirect_uri\", callbackURL.toString());\n\n    let { accessToken, refreshToken, extraParams } =\n      await this.fetchAccessToken(code, params, challenge);\n\n    // Get the profile\n    let profile = await this.userProfile(accessToken, extraParams);\n\n    // Verify the user and return it, or redirect\n    try {\n      user = await this.verify({\n        accessToken,\n        refreshToken,\n        extraParams,\n        profile,\n        context: options.context,\n      });\n    } catch (error) {\n      debug(\"Failed to verify user\", error);\n      let message = (error as Error).message;\n      return await this.failure(message, request, sessionStorage, options);\n    }\n    \n    debug(\"User authenticated\");\n    return await this.success(user, request, sessionStorage, options);\n  }\n\n  private getConfidentialHeader() {\n    return Buffer.from(`${this.clientID}:${this.clientSecret}`).toString('base64')\n  }\n\n  /**\n   * Retrieve user profile from service provider.\n   *\n   * OAuth 2.0-based authentication strategies can override this function in\n   * order to load the user's profile from the service provider.  This assists\n   * applications (and users of those applications) in the initial registration\n   * process by automatically submitting required information.\n   */\n  protected async userProfile(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    accessToken: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    params: ExtraParams\n  ): Promise<Profile> {\n    const url = new URL('https://api.twitter.com/2/users/me')\n    url.searchParams.append('user.fields', 'id,name,username,profile_image_url')\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`\n      }\n    })\n\n    const json = await response.json()\n\n    return { \n      provider: \"oauth2\",\n      displayName: json.data.name,\n      id: json.data.id,\n      name: json.data.username,\n      photos: [{ value: json.data.profile_image_url }]\n    } as Profile;\n  }\n\n  /**\n   * Return extra parameters to be included in the authorization request.\n   *\n   * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n   * included when requesting authorization.  Since these parameters are not\n   * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n   * strategies can override this function in order to populate these\n   * parameters as required by the provider.\n   */\n  protected authorizationParams(params: URLSearchParams): URLSearchParams {\n    return new URLSearchParams(params);\n  }\n\n  /**\n   * Return extra parameters to be included in the token request.\n   *\n   * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n   * included when requesting an access token.  Since these parameters are not\n   * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n   * strategies can override this function in order to populate these\n   * parameters as required by the provider.\n   */\n  protected tokenParams(): URLSearchParams {\n    return new URLSearchParams();\n  }\n\n  protected async getAccessToken(response: Response): Promise<{\n    accessToken: string;\n    refreshToken: string;\n    extraParams: ExtraParams;\n  }> {\n    let { access_token, refresh_token, ...extraParams } = await response.json();\n    return {\n      accessToken: access_token as string,\n      refreshToken: refresh_token as string,\n      extraParams,\n    } as const;\n  }\n\n  private getCallbackURL(url: URL) {\n    if (\n      this.callbackURL.startsWith(\"http:\") ||\n      this.callbackURL.startsWith(\"https:\")\n    ) {\n      return new URL(this.callbackURL);\n    }\n    if (this.callbackURL.startsWith(\"/\")) {\n      return new URL(this.callbackURL, url);\n    }\n    return new URL(`${url.protocol}//${this.callbackURL}`);\n  }\n\n  private getAuthorizationURL(request: Request, state: string, challenge: string) {\n    let params = new URLSearchParams(\n      this.authorizationParams(new URL(request.url).searchParams)\n    );\n    params.set(\"response_type\", \"code\");\n    params.set(\"client_id\", this.clientID);\n    params.set(\n      \"redirect_uri\",\n      this.getCallbackURL(new URL(request.url)).toString()\n    );\n    params.set(\"state\", state);\n    params.set(\"scope\", this.scope);\n    params.set(\"code_challenge\", challenge);\n    params.set(\"code_challenge_method\", \"plain\");\n\n    let url = new URL(this.authorizationURL);\n    url.search = params.toString();\n\n    return url;\n  }\n\n  private generateState() {\n    return uuid();\n  }\n\n  private generateChallenge() {\n    return \"challenge\";\n  }\n\n  /**\n   * Format the data to be sent in the request body to the token endpoint.\n   */\n  private async fetchAccessToken(\n    code: string,\n    params: URLSearchParams,\n    codeVerifier: string,\n  ): Promise<{\n    accessToken: string;\n    refreshToken: string;\n    extraParams: ExtraParams;\n  }> {\n    params.set(\"client_id\", this.clientID);\n    params.set(\"client_secret\", this.clientSecret);\n    params.set(\"code_verifier\", codeVerifier)\n\n    if (params.get(\"grant_type\") === \"refresh_token\") {\n      params.set(\"refresh_token\", code);\n    } else {\n      params.set(\"code\", code);\n    }\n\n    let response = await fetch(this.tokenURL, {\n      method: \"POST\",\n      headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Authorization\": `Basic ${this.getConfidentialHeader()}`\n      },\n      body: params,\n    });\n\n    if (!response.ok) {\n      try {\n        let body = await response.text();\n        throw new Response(body, { status: 401 });\n      } catch (error) {\n        throw new Response((error as Error).message, { status: 401 });\n      }\n    }\n\n    return await this.getAccessToken(response.clone() as unknown as Response);\n  }\n}\n", "import { useState } from \"react\";\n\nexport default function Dashboard() {\n  const [showCompleted, setShowCompleted] = useState<boolean>(false);\n\n  return (\n    <div>\n      <div>\n        <div>\n          <button>My Account</button>\n        </div>\n        <div>\n          <select>\n            <option>Please select a language...</option>\n          </select>\n        </div>\n      </div>\n      <div>\n        <div>\n          <button onClick={() => setShowCompleted(false)}>To-do</button>\n          <button onClick={() => setShowCompleted(true)}>Completed</button>\n        </div>\n        <hr />\n        <div>\n          {showCompleted ? (\n            <div>\n              <p>Here are the completed translations.</p>\n            </div>\n          ) : (\n            <div>Here are the pending translations.</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n", "import type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { getTranslationForLanguage } from \"~/services/translator.server\";\n\ntype LoaderData = {\n  translation: string;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const translation = await getTranslationForLanguage({\n    sourceLangCode: \"el\",\n    targetLangCode: \"en\",\n    text: \"\u03A0\u03C1\u03BF\u03C3\u03BF\u03C7\u03AE \u039D\u03AD\u03BC\u03B5\u03C3\u03B9\u03C2 ,\u03B1\u03C0\u03CC \u03C4\u03B1 \u03C4\u03BF\u03C5\u03C1\u03BA\u03B9\u03BA\u03AC \u03C3\u03C4\u03B1 \u03B1\u03B3\u03B3\u03BB\u03B9\u03BA\u03AC\",\n  });\n  return json<LoaderData>({ translation: translation ?? \"\" });\n};\n", "import { TranslateClient, TranslateTextCommand } from \"@aws-sdk/client-translate\";\nimport { fromNodeProviderChain } from \"@aws-sdk/credential-providers\"\n\ninterface GetTranslationOptions {\n    text: string\n    sourceLangCode: string\n    targetLangCode: string\n}\n\nconst region = process.env.AWS_TRANSLATE_REGION\n\nexport async function getTranslationForLanguage(options: GetTranslationOptions): Promise<string | undefined> {\n    try {\n        const credentials = fromNodeProviderChain({\n            //providerId: 'sandbox',\n            profile: 'sandbox',\n        });\n\n        const client = new TranslateClient({ \n          region,\n          credentials,\n        });\n\n        const command = new TranslateTextCommand({\n            SourceLanguageCode: options.sourceLangCode,\n            TargetLanguageCode: options.targetLangCode,\n            Text: options.text,\n        });\n    \n        const response = await client.send(command)\n\n        return response.TranslatedText\n    } catch (err) {\n        throw err\n    }\n}", "export default function Translate() {\n  return (\n    <div>\n      <div>\n        <div>\n          <button>Back</button>\n          <div>\n            <span>Source Lang</span>\n            <span>Target Lang</span>\n          </div>\n          <button>Back</button>\n        </div>\n        <div>\n          <button>Return to dashboard</button>\n        </div>\n      </div>\n\n      <div>\n        <p></p>\n      </div>\n\n      <div></div>\n\n      <div></div>\n\n      <div>\n        <button>Check</button>\n      </div>\n    </div>\n  );\n}\n", "import type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { logout } from \"~/services/session.server\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  return logout(request);\n};\n\nexport const loader: LoaderFunction = async () => {\n  return redirect(\"/\");\n};\n", "import { Form } from \"@remix-run/react\";\n\nimport { useOptionalUser } from \"~/utils\";\n\nexport default function Index() {\n  const user = useOptionalUser();\n  return (\n    <main className=\"relative min-h-screen bg-blue-900 sm:flex sm:items-center sm:justify-center\">\n      <div className=\"relative sm:pb-16 sm:pt-8\">\n        <div className=\"mx-auto max-w-7xl sm:px-6 lg:px-8\">\n          {/** Main */}\n          <div className=\"relative sm:overflow-hidden\">\n            <div className=\"relative px-5 py-8 flex flex-col align-center\">\n              <div className=\"text-center mb-6\">\n                <h1 className=\"font-bold text-white text-3xl md:text-5xl\">\n                  Bookmark, Translate, Learn\n                </h1>\n              </div>\n              <div className=\"mb-8 md:max-w-2xl max-w-md\" style={{ alignSelf: 'center' }}>\n                <p className=\"text-blue-200 text-center md:text-xl\">\n                  We accelerate your language learning by <strong>translating your bookmarked \n                  tweets</strong> and seeing if you can translate the tweets!\n                </p>\n              </div>\n              <div className=\"mx-auto max-w-sm sm:flex sm:max-w-none justify-center\">\n                {user ? (\n                  <div>logged in</div>\n                ) : (\n                  <Form method=\"post\" action=\"/login\">\n                    <button className=\"uppercase flex items-center justify-center rounded-md border border-none bg-green-600 px-4 py-3 text-sm md:text-lg font-bold text-white shadow-sm hover:bg-green-700 sm:px-8\">\n                      Login with Twitter\n                    </button>\n                  </Form>\n                )}\n              </div>\n            </div>\n          </div>\n          {/** End Main */}\n        </div>\n      </div>\n    </main>\n  );\n}\n", "// app/routes/login.tsx\nimport type { ActionFunction } from \"@remix-run/node\";\nimport { Form } from \"@remix-run/react\";\nimport { authenticator } from \"~/services/auth.server\";\n\n// Normally this will redirect user to twitter auth page\nexport let action: ActionFunction = async ({ request }) => {\n  await authenticator.authenticate(\"twitter\", request, {\n    successRedirect: \"/bookmarks\", // Destination in case the user is already logged in\n  });\n};\n\nexport default function LoginPage() {\n  return (\n    <div className=\"flex h-full min-h-screen flex-col\">\n      <Form method=\"post\" action=\"/login\">\n        <button>Login</button>\n      </Form>\n    </div>\n  );\n}\n", "import type { LoaderFunction } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, NavLink, Outlet, useLoaderData } from \"@remix-run/react\";\n\nimport { requireUserId } from \"~/services/session.server\";\nimport { useUser } from \"~/utils\";\nimport { getNoteListItems } from \"~/models/note.server\";\n\ntype LoaderData = {\n  noteListItems: Awaited<ReturnType<typeof getNoteListItems>>;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const userId = await requireUserId(request);\n  const noteListItems = await getNoteListItems({ userId });\n  return json<LoaderData>({ noteListItems });\n};\n\nexport default function NotesPage() {\n  const data = useLoaderData() as LoaderData;\n  const user = useUser();\n\n  return (\n    <div className=\"flex h-full min-h-screen flex-col\">\n      <header className=\"flex items-center justify-between bg-slate-800 p-4 text-white\">\n        <h1 className=\"text-3xl font-bold\">\n          <Link to=\".\">Notes</Link>\n        </h1>\n        <p>{user.email}</p>\n        <Form action=\"/logout\" method=\"post\">\n          <button\n            type=\"submit\"\n            className=\"rounded bg-slate-600 py-2 px-4 text-blue-100 hover:bg-blue-500 active:bg-blue-600\"\n          >\n            Logout\n          </button>\n        </Form>\n      </header>\n\n      <main className=\"flex h-full bg-white\">\n        <div className=\"h-full w-80 border-r bg-gray-50\">\n          <Link to=\"new\" className=\"block p-4 text-xl text-blue-500\">\n            + New Note\n          </Link>\n\n          <hr />\n\n          {data.noteListItems.length === 0 ? (\n            <p className=\"p-4\">No notes yet</p>\n          ) : (\n            <ol>\n              {data.noteListItems.map((note) => (\n                <li key={note.id}>\n                  <NavLink\n                    className={({ isActive }) =>\n                      `block border-b p-4 text-xl ${isActive ? \"bg-white\" : \"\"}`\n                    }\n                    to={note.id}\n                  >\n                    \uD83D\uDCDD {note.title}\n                  </NavLink>\n                </li>\n              ))}\n            </ol>\n          )}\n        </div>\n\n        <div className=\"flex-1 p-6\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n}\n", "import arc from \"@architect/functions\";\nimport cuid from \"cuid\";\n\nimport type { User } from \"./user.server\";\n\nexport type Note = {\n  id: ReturnType<typeof cuid>;\n  userId: User[\"id\"];\n  title: string;\n  body: string;\n};\n\ntype NoteItem = {\n  pk: User[\"id\"];\n  sk: `note#${Note[\"id\"]}`;\n};\n\nconst skToId = (sk: NoteItem[\"sk\"]): Note[\"id\"] => sk.replace(/^note#/, \"\");\nconst idToSk = (id: Note[\"id\"]): NoteItem[\"sk\"] => `note#${id}`;\n\nexport async function getNote({\n  id,\n  userId,\n}: Pick<Note, \"id\" | \"userId\">): Promise<Note | null> {\n  const db = await arc.tables();\n\n  const result = await await db.note.get({ pk: userId, sk: idToSk(id) });\n\n  if (result) {\n    return {\n      userId: result.pk,\n      id: result.sk,\n      title: result.title,\n      body: result.body,\n    };\n  }\n  return null;\n}\n\nexport async function getNoteListItems({\n  userId,\n}: Pick<Note, \"userId\">): Promise<Array<Pick<Note, \"id\" | \"title\">>> {\n  const db = await arc.tables();\n\n  const result = await db.note.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": userId },\n  });\n\n  return result.Items.map((n: any) => ({\n    title: n.title,\n    id: skToId(n.sk),\n  }));\n}\n\nexport async function createNote({\n  body,\n  title,\n  userId,\n}: Pick<Note, \"body\" | \"title\" | \"userId\">): Promise<Note> {\n  const db = await arc.tables();\n\n  const result = await db.note.put({\n    pk: userId,\n    sk: idToSk(cuid()),\n    title: title,\n    body: body,\n  });\n  return {\n    id: skToId(result.sk),\n    userId: result.pk,\n    title: result.title,\n    body: result.body,\n  };\n}\n\nexport async function deleteNote({ id, userId }: Pick<Note, \"id\" | \"userId\">) {\n  const db = await arc.tables();\n  return db.note.delete({ pk: userId, sk: idToSk(id) });\n}\n", "import type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useCatch, useLoaderData } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\nimport type { Note } from \"~/models/note.server\";\nimport { deleteNote } from \"~/models/note.server\";\nimport { getNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/services/session.server\";\n\ntype LoaderData = {\n  note: Note;\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const userId = await requireUserId(request);\n  invariant(params.noteId, \"noteId not found\");\n\n  const note = await getNote({ userId, id: params.noteId });\n  if (!note) {\n    throw new Response(\"Not Found\", { status: 404 });\n  }\n  return json<LoaderData>({ note });\n};\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  const userId = await requireUserId(request);\n  invariant(params.noteId, \"noteId not found\");\n\n  await deleteNote({ userId, id: params.noteId });\n\n  return redirect(\"/notes\");\n};\n\nexport default function NoteDetailsPage() {\n  const data = useLoaderData() as LoaderData;\n\n  return (\n    <div>\n      <h3 className=\"text-2xl font-bold\">{data.note.title}</h3>\n      <p className=\"py-6\">{data.note.body}</p>\n      <hr className=\"my-4\" />\n      <Form method=\"post\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n        >\n          Delete\n        </button>\n      </Form>\n    </div>\n  );\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  console.error(error);\n\n  return <div>An unexpected error occurred: {error.message}</div>;\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch();\n\n  if (caught.status === 404) {\n    return <div>Note not found</div>;\n  }\n\n  throw new Error(`Unexpected caught response with status: ${caught.status}`);\n}\n", "import { Link } from \"@remix-run/react\";\n\nexport default function NoteIndexPage() {\n  return (\n    <p>\n      No note selected. Select a note on the left, or{\" \"}\n      <Link to=\"new\" className=\"text-blue-500 underline\">\n        create a new note.\n      </Link>\n    </p>\n  );\n}\n", "import type { ActionFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useActionData } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { createNote } from \"~/models/note.server\";\nimport { requireUserId } from \"~/services/session.server\";\n\ntype ActionData = {\n  errors?: {\n    title?: string;\n    body?: string;\n  };\n};\n\nexport const action: ActionFunction = async ({ request }) => {\n  const userId = await requireUserId(request);\n\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  const body = formData.get(\"body\");\n\n  if (typeof title !== \"string\" || title.length === 0) {\n    return json<ActionData>(\n      { errors: { title: \"Title is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof body !== \"string\" || body.length === 0) {\n    return json<ActionData>(\n      { errors: { body: \"Body is required\" } },\n      { status: 400 }\n    );\n  }\n\n  const note = await createNote({ title, body, userId });\n\n  return redirect(`/notes/${note.id}`);\n};\n\nexport default function NewNotePage() {\n  const actionData = useActionData() as ActionData;\n  const titleRef = React.useRef<HTMLInputElement>(null);\n  const bodyRef = React.useRef<HTMLTextAreaElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.title) {\n      titleRef.current?.focus();\n    } else if (actionData?.errors?.body) {\n      bodyRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <Form\n      method=\"post\"\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        gap: 8,\n        width: \"100%\",\n      }}\n    >\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Title: </span>\n          <input\n            ref={titleRef}\n            name=\"title\"\n            className=\"flex-1 rounded-md border-2 border-blue-500 px-3 text-lg leading-loose\"\n            aria-invalid={actionData?.errors?.title ? true : undefined}\n            aria-errormessage={\n              actionData?.errors?.title ? \"title-error\" : undefined\n            }\n          />\n        </label>\n        {actionData?.errors?.title && (\n          <div className=\"pt-1 text-red-700\" id=\"title-error\">\n            {actionData.errors.title}\n          </div>\n        )}\n      </div>\n\n      <div>\n        <label className=\"flex w-full flex-col gap-1\">\n          <span>Body: </span>\n          <textarea\n            ref={bodyRef}\n            name=\"body\"\n            rows={8}\n            className=\"w-full flex-1 rounded-md border-2 border-blue-500 py-2 px-3 text-lg leading-6\"\n            aria-invalid={actionData?.errors?.body ? true : undefined}\n            aria-errormessage={\n              actionData?.errors?.body ? \"body-error\" : undefined\n            }\n          />\n        </label>\n        {actionData?.errors?.body && (\n          <div className=\"pt-1 text-red-700\" id=\"body-error\">\n            {actionData.errors.body}\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-right\">\n        <button\n          type=\"submit\"\n          className=\"rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n        >\n          Save\n        </button>\n      </div>\n    </Form>\n  );\n}\n", "import type {\n  ActionFunction,\n  LoaderFunction,\n  MetaFunction,\n} from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport * as React from \"react\";\n\nimport { getUser, createUserSession } from \"~/services/session.server\";\n\nimport { createUser, getUserByEmail } from \"~/models/user.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request);\n  if (user) return redirect(\"/\");\n  return json({});\n};\n\ninterface ActionData {\n  errors: {\n    email?: string;\n    password?: string;\n  };\n}\n\nexport const action: ActionFunction = async ({ request }) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n\n  if (!validateEmail(email)) {\n    return json<ActionData>(\n      { errors: { email: \"Email is invalid\" } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json<ActionData>(\n      { errors: { password: \"Password is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json<ActionData>(\n      { errors: { password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const existingUser = await getUserByEmail(email);\n  if (existingUser) {\n    return json<ActionData>(\n      { errors: { email: \"A user already exists with this email\" } },\n      { status: 400 }\n    );\n  }\n\n  const user = await createUser(email, password);\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: false,\n    redirectTo,\n  });\n};\n\nexport const meta: MetaFunction = () => {\n  return {\n    title: \"Sign Up\",\n  };\n};\n\nexport default function Join() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") ?? undefined;\n  const actionData = useActionData() as ActionData;\n  const emailRef = React.useRef<HTMLInputElement>(null);\n  const passwordRef = React.useRef<HTMLInputElement>(null);\n\n  React.useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <div className=\"flex min-h-full flex-col justify-center\">\n      <div className=\"mx-auto w-full max-w-md px-8\">\n        <Form method=\"post\" className=\"space-y-6\" noValidate>\n          <div>\n            <label\n              htmlFor=\"email\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Email address\n            </label>\n            <div className=\"mt-1\">\n              <input\n                ref={emailRef}\n                id=\"email\"\n                required\n                autoFocus={true}\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                aria-invalid={actionData?.errors?.email ? true : undefined}\n                aria-describedby=\"email-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.email && (\n                <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                  {actionData.errors.email}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <label\n              htmlFor=\"password\"\n              className=\"block text-sm font-medium text-gray-700\"\n            >\n              Password\n            </label>\n            <div className=\"mt-1\">\n              <input\n                id=\"password\"\n                ref={passwordRef}\n                name=\"password\"\n                type=\"password\"\n                autoComplete=\"new-password\"\n                aria-invalid={actionData?.errors?.password ? true : undefined}\n                aria-describedby=\"password-error\"\n                className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n              />\n              {actionData?.errors?.password && (\n                <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                  {actionData.errors.password}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n          <button\n            type=\"submit\"\n            className=\"w-full rounded bg-blue-500  py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400\"\n          >\n            Create Account\n          </button>\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-center text-sm text-gray-500\">\n              Already have an account?{\" \"}\n              <Link\n                className=\"text-blue-500 underline\"\n                to={{\n                  pathname: \"/login\",\n                  search: searchParams.toString(),\n                }}\n              >\n                Log in\n              </Link>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}\n", "import type { ActionFunction } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { createUser } from \"~/models/user.server\";\nimport { createUserSession } from \"~/services/session.server\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  if (process.env.NODE_ENV === \"production\") {\n    console.error(\n      \"\uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 test routes should not be enabled in production \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8 \uD83D\uDEA8\"\n    );\n    // test routes should not be enabled in production or without\n    // enable test routes... Just in case this somehow slips through\n    // we'll redirect :)\n    return redirect(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\");\n  }\n\n  const { email } = await request.json();\n  if (!email) {\n    throw new Error(\"email required for login\");\n  }\n  if (!email.endsWith(\"@example.com\")) {\n    throw new Error(\"All test emails must end in @example.com\");\n  }\n\n  const user = await createUser(email, \"myreallystrongpassword\");\n\n  return createUserSession({\n    request,\n    userId: user.id,\n    remember: true,\n    redirectTo: \"/\",\n  });\n};\n\nexport default null;\n", "export default {'version':'bea34967','entry':{'module':'/_static/build/entry.client-UJOX3EO3.js','imports':['/_static/build/_shared/chunk-66FM26W5.js','/_static/build/_shared/chunk-O6YYFGCX.js']},'routes':{'/Users/aowusu-ansah/Work/twitterlingo/cypress/support/test-routes/create-user':{'id':'/Users/aowusu-ansah/Work/twitterlingo/cypress/support/test-routes/create-user','parentId':'root','path':'__tests/create-user','index':undefined,'caseSensitive':undefined,'module':'/_static/build/_.._/_.._/cypress/support/test-routes/create-user-JEEZHSIY.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/_static/build/root-ZC3BDD44.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/bookmarks/index':{'id':'routes/bookmarks/index','parentId':'root','path':'bookmarks','index':true,'caseSensitive':undefined,'module':'/_static/build/routes/bookmarks/index-S4VTMMZZ.js','imports':['/_static/build/_shared/chunk-3C72EUF4.js','/_static/build/_shared/chunk-E6HE4FUV.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/dashboard':{'id':'routes/dashboard','parentId':'root','path':'dashboard','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/dashboard-OL66OYIU.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/_static/build/routes/index-MVJTED5Q.js','imports':['/_static/build/_shared/chunk-3C72EUF4.js'],'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/join':{'id':'routes/join','parentId':'root','path':'join','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/join-ELOAV2UL.js','imports':['/_static/build/_shared/chunk-3C72EUF4.js','/_static/build/_shared/chunk-E6HE4FUV.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/login-VRM6XMWX.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login.callback':{'id':'routes/login.callback','parentId':'root','path':'login/callback','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/login.callback-THH2ON6C.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/logout-LOK6OPER.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes':{'id':'routes/notes','parentId':'root','path':'notes','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/notes-NOEXH4PF.js','imports':['/_static/build/_shared/chunk-BURPMA5Y.js','/_static/build/_shared/chunk-3C72EUF4.js','/_static/build/_shared/chunk-E6HE4FUV.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes/$noteId':{'id':'routes/notes/$noteId','parentId':'routes/notes','path':':noteId','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/notes/$noteId-K2NUAFLB.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':true,'hasErrorBoundary':true},'routes/notes/index':{'id':'routes/notes/index','parentId':'routes/notes','path':undefined,'index':true,'caseSensitive':undefined,'module':'/_static/build/routes/notes/index-ZTAYSQVK.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/notes/new':{'id':'routes/notes/new','parentId':'routes/notes','path':'new','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/notes/new-NFM4R2Y7.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/translate':{'id':'routes/translate','parentId':'root','path':'translate','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/translate-ZV5ME4G6.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/translate/$translateId':{'id':'routes/translate/$translateId','parentId':'routes/translate','path':':translateId','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/translate/$translateId-2GC5CKJM.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/_static/build/manifest-BEA34967.js'};"],
  "mappings": "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",
  "names": []
}
