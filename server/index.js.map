{
  "version": 3,
  "sources": ["../node_modules/@remix-run/dev/dist/compiler/shims/react.ts", "../mocks/index.js", "../server.ts", "server-entry-module:@remix-run/dev/server-build", "../app/entry.server.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/root.tsx", "../app/services/session.server.ts", "../app/models/user.server.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/translate/$translateId.tsx", "../app/models/translation.server.ts", "../app/components/dashboard/TranslationItem.tsx", "../app/constants/languages.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/bookmarks/index.tsx", "../app/services/translation.server.ts", "../app/services/translator.server.ts", "../app/services/twitter.server.ts", "../app/utils/sanitizeTweet.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/user/preference.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/login.callback.tsx", "../app/services/auth.server.ts", "../app/auth/TwitterOAuth2Strategy.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/dashboard.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/logout.tsx", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/index.tsx", "../app/utils.ts", "/Users/aowusu-ansah/Work/twitterlingo/app/routes/login.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest"],
  "sourcesContent": ["// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "const { setupServer } = require(\"msw/node\");\n\nconst server = setupServer();\n\nserver.listen({ onUnhandledRequest: \"bypass\" });\n\nprocess.once(\"SIGINT\", () => server.close());\nprocess.once(\"SIGTERM\", () => server.close());\n", "import { createRequestHandler } from \"@remix-run/architect\";\nimport * as build from \"@remix-run/dev/server-build\";\n\nif (process.env.NODE_ENV !== \"production\") {\n  require(\"./mocks\");\n}\n\nexport const handler = createRequestHandler({\n  build,\n  mode: process.env.NODE_ENV,\n});\n", "\nimport * as entryServer from \"/Users/aowusu-ansah/Work/twitterlingo/app/entry.server.tsx\";\nimport * as route0 from \"/Users/aowusu-ansah/Work/twitterlingo/app/root.tsx\";\nimport * as route1 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/translate/$translateId.tsx\";\nimport * as route2 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/bookmarks/index.tsx\";\nimport * as route3 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/user/preference.tsx\";\nimport * as route4 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/login.callback.tsx\";\nimport * as route5 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/dashboard.tsx\";\nimport * as route6 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/logout.tsx\";\nimport * as route7 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/index.tsx\";\nimport * as route8 from \"/Users/aowusu-ansah/Work/twitterlingo/app/routes/login.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/translate/$translateId\": {\n      id: \"routes/translate/$translateId\",\n      parentId: \"root\",\n      path: \"translate/:translateId\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/bookmarks/index\": {\n      id: \"routes/bookmarks/index\",\n      parentId: \"root\",\n      path: \"bookmarks\",\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/user/preference\": {\n      id: \"routes/user/preference\",\n      parentId: \"root\",\n      path: \"user/preference\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/login.callback\": {\n      id: \"routes/login.callback\",\n      parentId: \"root\",\n      path: \"login/callback\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/dashboard\": {\n      id: \"routes/dashboard\",\n      parentId: \"root\",\n      path: \"dashboard\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/logout\": {\n      id: \"routes/logout\",\n      parentId: \"root\",\n      path: \"logout\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    }\n  };", "import type { EntryContext } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { renderToString } from \"react-dom/server\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import type {\n  LinksFunction,\n  LoaderFunction,\n  MetaFunction,\n} from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nimport tailwindStylesheetUrl from \"./styles/tailwind.css\";\nimport { getUser } from \"./services/session.server\";\n\nexport const links: LinksFunction = () => {\n  return [\n    { rel: \"stylesheet\", href: tailwindStylesheetUrl },\n    // NOTE: Architect deploys the public directory to /_static/\n    { rel: \"icon\", href: \"/_static/favicon.ico\" },\n  ];\n};\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Remix Notes\",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\ntype LoaderData = {\n  user: Awaited<ReturnType<typeof getUser>>;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  return json<LoaderData>({\n    user: await getUser(request),\n  });\n};\n\nexport default function App() {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body className=\"h-full\">\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n", "import { createCookieSessionStorage } from \"@remix-run/node\";\nimport invariant from \"tiny-invariant\";\nimport { redirect } from \"@remix-run/node\";\n\nimport type { SessionUser } from \"~/models/user.server\";\nimport { getUserById } from \"~/models/user.server\";\n\ninvariant(process.env.SESSION_SECRET, \"SESSION_SECRET must be set\");\n\n// export the whole sessionStorage object\nexport let sessionStorage = createCookieSessionStorage({\n  cookie: {\n    name: \"_session\", // use any name you want here\n    sameSite: \"lax\", // this helps with CSRF\n    path: \"/\", // remember to add this so the cookie will work in all routes\n    httpOnly: true, // for security reasons, make this cookie http only\n    secrets: [process.env.SESSION_SECRET],\n    secure: process.env.NODE_ENV === \"production\", // enable this in prod only\n  },\n});\n\n// you can also export the methods individually for your own usage\nexport let { commitSession, destroySession } = sessionStorage;\n\nconst USER_SESSION_KEY = \"user\";\n\nexport async function getSession(request: Request) {\n  const cookie = request.headers.get(\"Cookie\");\n  return sessionStorage.getSession(cookie);\n}\n\nexport async function getSessionUser(\n  request: Request\n): Promise<SessionUser | undefined> {\n  const session = await getSession(request);\n  const user = session.get(USER_SESSION_KEY);\n  return user;\n}\n\nexport async function getUser(request: Request) {\n  const user = await getSessionUser(request);\n\n  if (user === undefined) return null;\n\n  const dbUser = await getUserById(user.id);\n\n  if (dbUser) {\n    return user;\n  }\n\n  throw await logout(request);\n}\n\nexport async function requireUserId(\n  request: Request,\n  redirectTo: string = new URL(request.url).pathname\n) {\n  const user = await getSessionUser(request);\n  if (!user) {\n    const searchParams = new URLSearchParams([[\"redirectTo\", redirectTo]]);\n    throw redirect(`/login?${searchParams}`);\n  }\n  return user.id;\n}\n\nexport async function requireUser(request: Request) {\n  const userId = await requireUserId(request);\n\n  const user = await getUserById(userId);\n  if (user) return user;\n\n  throw await logout(request);\n}\n\nexport async function createUserSession({\n  request,\n  userId,\n  remember,\n  redirectTo,\n}: {\n  request: Request;\n  userId: string;\n  remember: boolean;\n  redirectTo: string;\n}) {\n  const session = await getSession(request);\n  session.set(USER_SESSION_KEY, userId);\n  return redirect(redirectTo, {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.commitSession(session, {\n        maxAge: remember\n          ? 60 * 60 * 24 * 7 // 7 days\n          : undefined,\n      }),\n    },\n  });\n}\n\nexport async function logout(request: Request) {\n  const session = await getSession(request);\n  return redirect(\"/\", {\n    headers: {\n      \"Set-Cookie\": await sessionStorage.destroySession(session),\n    },\n  });\n}\n", "import arc from \"@architect/functions\";\nimport invariant from \"tiny-invariant\";\nimport type { OAuth2Profile } from \"~/auth/TwitterOAuth2Strategy\";\n\nexport type User = {\n  id: string;\n  email: string;\n  sourceLangPreference: string;\n};\n\nexport interface SessionUser extends User {\n  accessToken: string;\n  profile: OAuth2Profile;\n}\n\nexport type Password = { password: string };\n\nexport async function getUserById(id: User[\"id\"]): Promise<User | null> {\n  const db = await arc.tables();\n  const result = await db.user.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": id },\n  });\n\n  const [record] = result.Items;\n  if (record) {\n    return {\n      id: record.pk,\n      email: record.email,\n      sourceLangPreference: record.sourceLangPreference,\n    };\n  }\n  return null;\n}\n\nexport async function createTwitterUser({\n  profile,\n}: {\n  profile: OAuth2Profile;\n}) {\n  const db = await arc.tables();\n\n  await db.user.put({\n    pk: `id#${profile.id}`,\n    email: \"\",\n    sourceLangPreference: 'en',\n  });\n\n  const user = await getUserById(`id#${profile.id}`);\n  invariant(user, `User not found after being created. This should not happen`);\n\n  return user;\n}\n\nexport async function findOrCreateFromTwitter({\n  profile,\n  accessToken,\n}: {\n  profile: OAuth2Profile;\n  accessToken: string;\n}) {\n  function getUserData(user: User): SessionUser {\n    return {\n      ...user,\n      accessToken,\n      profile,\n    };\n  }\n\n  let user = await getUserById(`id#${profile.id}`);\n\n  if (user) {\n    return getUserData(user);\n  } else {\n    const newUser = await createTwitterUser({\n      profile,\n    });\n    return getUserData(newUser);\n  }\n}\n\nexport async function setSourceLangPreference(\n  userId: User[\"id\"],\n  sourceLang: string\n) {\n  const db = await arc.tables();\n  let user = await getUserById(`id#${userId}`);\n\n  try {\n    if (user) {\n      await db.user.put({\n        pk: `id#${userId}`,\n        sourceLangPreference: sourceLang,\n      });\n      return true;\n    }\n    return false;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function deleteUser(email: User[\"email\"]) {\n  const db = await arc.tables();\n  await db.password.delete({ pk: `email#${email}` });\n  await db.user.delete({ pk: `email#${email}` });\n}", "import { useState, useEffect } from \"react\";\nimport { Form, Link, useActionData, useLoaderData } from \"@remix-run/react\";\nimport {\n  ActionFunction,\n  json,\n  LoaderFunction,\n  redirect,\n} from \"@remix-run/server-runtime\";\nimport {\n  getTranslation,\n  setCompleteTranslation,\n} from \"~/models/translation.server\";\nimport { getUser } from \"~/services/session.server\";\nimport TranslationItem from \"~/components/dashboard/TranslationItem\";\nimport { SessionUser } from \"~/models/user.server\";\nimport { languages } from \"~/constants/languages\";\n\ntype LoaderData = {\n  translation: Awaited<ReturnType<typeof getTranslation>>;\n  user: SessionUser | null;\n};\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  const user = await getUser(request);\n  const translation = await getTranslation({\n    userId: user!.id,\n    id: params.translateId!,\n  });\n  return json<LoaderData>({ translation: translation!, user });\n};\n\nexport let action: ActionFunction = async ({ request }) => {\n  const form = await request.formData();\n  const userId = form.get(\"userId\") as string;\n  const translationId = form.get(\"translationId\") as string;\n  const targetLangText = form.get(\"targetLangText\") as string;\n  const targetLangTextInput = form.get(\"targetLangTextInput\") as string;\n\n  if (targetLangTextInput === targetLangText) {\n    return await setCompleteTranslation(userId, translationId).then(\n      function () {\n        return redirect(`/dashboard`);\n      }\n    );\n  }\n\n  return json(true);\n};\n\nexport default function Translate() {\n  const data = useLoaderData() as LoaderData;\n  const actionData = useActionData();\n\n  const { translation, user } = data;\n\n  const { id, userId, sourceLangCode, targetLangCode, targetLangText } =\n    translation!;\n\n  const targetLangTextSplitString: string[] = targetLangText.split(\" \");\n\n  const [targetLangTextInputArray, setTargetLangTextInputArray] = useState<\n    string[]\n  >([]);\n\n  const [targetLangTextInput, setTargetLangTextInput] = useState<string>(\"\");\n\n  function getLanguageNameFromLangCode(langCode: string) {\n    const [language] = languages.filter(function (l) {\n      return l.langCode === langCode;\n    });\n    return language.name;\n  }\n\n  const sourceLangAlt = getLanguageNameFromLangCode(sourceLangCode);\n  const targetLangAlt = getLanguageNameFromLangCode(targetLangCode);\n\n  useEffect(() => {\n    setTargetLangTextInputArray([]);\n    setTargetLangTextInput(\"\");\n  }, [actionData]);\n\n  return (\n    <div className=\"relative min-h-screen bg-blue-900\">\n      <nav className=\"container mx-auto flex\">\n        <div className=\"flex w-full bg-blue-900 p-4\">\n          <div className=\"align-center flex w-full justify-between\">\n            <div>\n              <img\n                className=\"rounded-full\"\n                src={user?.profile?.photos?.[0].value ?? \"\"}\n                alt=\"twitter profile\"\n              />\n            </div>\n            <div className=\"flex\">\n              <div className=\"mr-3 self-center\">\n                <img\n                  className=\"rounded-md\"\n                  src={`/_static/icons/${sourceLangCode}.svg`}\n                  alt={sourceLangAlt}\n                />\n              </div>\n              <div className=\"mr-3 self-center\">\n                <img\n                  className=\"rounded-md\"\n                  src={`/_static/icons/${targetLangCode}.svg`}\n                  alt={targetLangAlt}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"container mx-auto px-4\">\n        <div className=\"px-6 pt-4 pb-2\">\n          <div className=\"grid gap-3\">\n            <TranslationItem\n              key={id}\n              translation={translation!}\n              targetLang={targetLangCode}\n            />\n          </div>\n        </div>\n\n        <div className=\"px-6 pt-4 pb-2\">\n          {targetLangTextInputArray.map(function (word, idx) {\n            return (\n              <span\n                key={idx}\n                className=\"mr-2 mb-2 inline-block rounded-full rounded-md bg-blue-800  px-3 py-1 text-sm text-white hover:cursor-pointer hover:bg-blue-700\"\n                onClick={function () {\n                  setTargetLangTextInputArray(function (prevState) {\n                    const newArray = [\n                      ...prevState.filter(function (item, _idx) {\n                        // return prevState[idx] !== prevState[_idx];\n                        return item !== word;\n                      }),\n                    ];\n                    setTargetLangTextInput(newArray.join(\" \"));\n                    return newArray;\n                  });\n                }}\n              >\n                {word}\n              </span>\n            );\n          })}\n        </div>\n\n        <div className=\"px-6 pt-4 pb-2\">\n          {targetLangTextSplitString.map(function (word, idx) {\n            return (\n              <span\n                key={idx}\n                className={`${\n                  targetLangTextInputArray.includes(word, idx)\n                    ? \"hidden\"\n                    : \"inline-block\"\n                } mr-2 mb-2 inline-block rounded-full rounded-md bg-gray-200  px-3 py-1 text-sm text-gray-700 hover:cursor-pointer hover:bg-blue-700 hover:text-white`}\n                onClick={() => {\n                  setTargetLangTextInputArray(function (prevState) {\n                    if (prevState.includes(word, idx)) {\n                      return prevState;\n                    }\n\n                    const newArray = [...prevState, word];\n                    setTargetLangTextInput(newArray.join(\" \"));\n                    return newArray;\n                  });\n                }}\n              >\n                {word}\n              </span>\n            );\n          })}\n        </div>\n\n        <Form method=\"post\">\n          {actionData && (\n            <div className=\"px-6 pt-4 pb-2\">\n              <div className=\"cursor-pointer rounded-md bg-red-800 px-4 py-3 hover:bg-blue-700\">\n                <div className=\"flex\">\n                  <div>\n                    <p className=\"text-white\">\n                      That's not correct. Please try again.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          <div className=\"px-6 pt-4 pb-2\">\n            <input type=\"hidden\" name=\"userId\" value={userId} />\n            <input type=\"hidden\" name=\"translationId\" value={id} />\n            <input type=\"hidden\" name=\"targetLangText\" value={targetLangText} />\n            <input\n              type=\"hidden\"\n              name=\"targetLangTextInput\"\n              value={targetLangTextInput}\n            />\n            <input\n              type=\"submit\"\n              className=\"w-full rounded-full bg-blue-500 py-2 px-4 text-white hover:cursor-pointer hover:bg-blue-700\"\n              value=\"Check\"\n            />\n            <Link\n              className=\"mx-auto w-full px-4 text-white hover:underline\"\n              to=\"/dashboard\"\n            >\n              Return to dashboard\n            </Link>\n          </div>\n        </Form>\n      </main>\n    </div>\n  );\n}\n", "import arc from \"@architect/functions\";\nimport cuid from \"cuid\";\n\nimport type { User } from \"./user.server\";\n\nexport type Translation = {\n  id: ReturnType<typeof cuid>;\n  bookmarkId: string;\n  userId: User[\"id\"];\n  sourceLangText: string;\n  targetLangText: string;\n  sourceLangCode: string;\n  targetLangCode: string;\n  completed: boolean;\n};\n\ntype TranslationItem = {\n  pk: User[\"id\"];\n  sk: `translation#${Translation[\"id\"]}`;\n};\n\ninterface DatabaseTranslationItem extends TranslationItem {\n  bookmarkId: string;\n  userId: User[\"id\"];\n  sourceLangText: string;\n  targetLangText: string;\n  sourceLangCode: string;\n  targetLangCode: string;\n  completed: boolean;\n}\n\nconst skToId = (sk: TranslationItem[\"sk\"]): Translation[\"id\"] =>\n  sk.replace(/^translation#/, \"\");\nconst idToSk = (id: Translation[\"id\"]): TranslationItem[\"sk\"] =>\n  `translation#${id}`;\n\nfunction mapFromDatabaseToModel(dbModel: DatabaseTranslationItem): Translation {\n  return {\n    id: skToId(dbModel.sk),\n    userId: dbModel.pk,\n    bookmarkId: dbModel.bookmarkId,\n    sourceLangText: dbModel.sourceLangText,\n    targetLangText: dbModel.targetLangText,\n    sourceLangCode: dbModel.sourceLangCode,\n    targetLangCode: dbModel.targetLangCode,\n    completed: dbModel.completed,\n  };\n}\n\nexport async function getTranslation({\n  id,\n  userId,\n}: Pick<Translation, \"id\" | \"userId\">): Promise<Translation | null> {\n  const db = await arc.tables();\n\n  const result = await db.translation.get({ pk: userId, sk: idToSk(id) });\n\n  if (result) {\n    return mapFromDatabaseToModel(result);\n  }\n\n  return null;\n}\n\nexport async function getTranslationListItems(\n  userId: Translation[\"userId\"]\n): Promise<Array<Translation>> {\n  const db = await arc.tables();\n\n  const result = await db.translation.query({\n    KeyConditionExpression: \"pk = :pk\",\n    ExpressionAttributeValues: { \":pk\": userId },\n  });\n\n  return result.Items.map((item: DatabaseTranslationItem) =>\n    mapFromDatabaseToModel(item)\n  );\n}\n\nexport async function createTranslation(\n  translation: Omit<Translation, \"id\">\n): Promise<Translation> {\n  const db = await arc.tables();\n\n  const result = await db.translation.put({\n    pk: translation.userId,\n    sk: idToSk(cuid()),\n    bookmarkId: translation.bookmarkId,\n    sourceLangText: translation.sourceLangText,\n    targetLangText: translation.targetLangText,\n    sourceLangCode: translation.sourceLangCode,\n    targetLangCode: translation.targetLangCode,\n    completed: translation.completed,\n  });\n\n  return mapFromDatabaseToModel(result);\n}\n\nexport async function setCompleteTranslation(\n  userId: User[\"id\"],\n  translationId: Translation[\"id\"]\n) {\n  try {\n    const db = await arc.tables();\n\n    const translation = await getTranslation({\n      id: translationId,\n      userId,\n    });\n\n    if (translation == null) {\n      return false;\n    }\n\n    await db.translation.put({\n      pk: userId,\n      sk: idToSk(translationId),\n      bookmarkId: translation.bookmarkId,\n      sourceLangText: translation.sourceLangText,\n      targetLangText: translation.targetLangText,\n      sourceLangCode: translation.sourceLangCode,\n      targetLangCode: translation.targetLangCode,\n      completed: true,\n    });\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function deleteTranslation({\n  id,\n  userId,\n}: Pick<Translation, \"id\" | \"userId\">) {\n  const db = await arc.tables();\n  return db.note.delete({ pk: userId, sk: idToSk(id) });\n}\n", "import { Form } from \"@remix-run/react\";\nimport { useRef } from \"react\";\nimport { Translation } from \"~/models/translation.server\";\n\nconst TranslationItem = ({ translation, targetLang }: { translation: Translation, targetLang: string }) => {\n  const formRef = useRef<any>();\n\n  function onItemClick() {\n    formRef.current.submit();\n  }\n\n  return (\n    <Form ref={formRef} method=\"post\" className=\"px-4 py-3 rounded-md bg-blue-800 hover:bg-blue-700 cursor-pointer\" onClick={onItemClick}>\n      <div className=\"flex\">\n        <img className=\"rounded-md self-center mr-4 shadow-lg\" alt=\"flag\" src={`/_static/icons/${translation.sourceLangCode.toUpperCase()}.svg`} />\n        <div>\n          <input type=\"hidden\" name=\"id\" value={translation.id} />\n          <input type=\"hidden\" name=\"bookmarkId\" value={translation.bookmarkId} />\n          <input\n            type=\"hidden\"\n            name=\"sourceLangCode\"\n            value={translation.sourceLangCode}\n          />\n          <input\n            type=\"hidden\"\n            name=\"targetLangCode\"\n            value={targetLang}\n          />\n          <input type=\"hidden\" name=\"text\" value={translation.sourceLangText} />\n          <p className=\"text-white\">{translation.sourceLangText}</p>\n        </div>\n      </div>\n    </Form>\n  );\n};\n\nexport default TranslationItem;\n", "export const languages = [\n  { name: \"Afrikaans\", langCode: \"af\", flagCode: \"ZA\" },\n  { name: \"Albanian\", langCode: \"sq\", flagCode: \"AL\" },\n  { name: \"Amharic\", langCode: \"am\", flagCode: \"ET\" },\n  { name: \"Arabic\", langCode: \"ar\", flagCode: \"\" },\n  { name: \"Armenian\", langCode: \"hy\", flagCode: \"AM\" },\n  { name: \"Azerbaijani\", langCode: \"az\", flagCode: \"AZ\" },\n  { name: \"Bengali\", langCode: \"bn\", flagCode: \"BD\" },\n  { name: \"Bosnian\", langCode: \"bs\", flagCode: \"BA\" },\n  { name: \"Bulgarian\", langCode: \"bg\", flagCode: \"BG\" },\n  { name: \"Catalan\", langCode: \"ca\", flagCode: \"\" },\n  { name: \"Chinese (Simplified)\", langCode: \"zh\", flagCode: \"CN\" },\n  { name: \"Chinese (Traditional)\", langCode: \"zh-TW\", flagCode: \"CN\" },\n  { name: \"Croatian\", langCode: \"hr\", flagCode: \"HR\" },\n  { name: \"Czech\", langCode: \"cs\", flagCode: \"CZ\" },\n  { name: \"Danish\", langCode: \"da\", flagCode: \"DK\" },\n  { name: \"Dari\", langCode: \"fa-AF\", flagCode: \"AF\" },\n  { name: \"Dutch\", langCode: \"nl\", flagCode: \"NL\" },\n  { name: \"English\", langCode: \"en\", flagCode: \"GB-ENG\" },\n  { name: \"Estonian\", langCode: \"et\", flagCode: \"EE\" },\n  { name: \"Farsi (Persian)\", langCode: \"fa\", flagCode: \"IR\" },\n  { name: \"Filipino, Tagalog\", langCode: \"tl\", flagCode: \"PH\" },\n  { name: \"Finnish\", langCode: \"fi\", flagCode: \"FI\" },\n  { name: \"French\", langCode: \"fr\", flagCode: \"FR\" },\n  { name: \"French (Canada)\", langCode: \"fr-CA\", flagCode: \"CA\" },\n  { name: \"Georgian\", langCode: \"ka\", flagCode: \"GE\" },\n  { name: \"German\", langCode: \"de\", flagCode: \"DE\" },\n  { name: \"Greek\", langCode: \"el\", flagCode: \"GR\" },\n  { name: \"Gujarati\", langCode: \"gu\", flagCode: \"IN\" },\n  { name: \"Haitian Creole\", langCode: \"ht\", flagCode: \"HT\" },\n  { name: \"Hausa\", langCode: \"ha\", flagCode: \"NG\" },\n  { name: \"Hebrew\", langCode: \"he\", flagCode: \"IL\" },\n  { name: \"Hindi\", langCode: \"hi\", flagCode: \"IN\" },\n  { name: \"Hungarian\", langCode: \"hu\", flagCode: \"HU\" },\n  { name: \"Icelandic\", langCode: \"is\", flagCode: \"IS\" },\n  { name: \"Indonesian\", langCode: \"id\", flagCode: \"ID\" },\n  { name: \"Irish\", langCode: \"ga\", flagCode: \"IE\" },\n  { name: \"Italian\", langCode: \"it\", flagCode: \"IT\" },\n  { name: \"Japanese\", langCode: \"ja\", flagCode: \"JP\" },\n  { name: \"Kannada\", langCode: \"kn\", flagCode: \"IN\" },\n  { name: \"Kazakh\", langCode: \"kk\", flagCode: \"KZ\" },\n  { name: \"Korean\", langCode: \"ko\", flagCode: \"KR\" },\n  { name: \"Latvian\", langCode: \"lv\", flagCode: \"LV\" },\n  { name: \"Lithuanian\", langCode: \"lt\", flagCode: \"LT\" },\n  { name: \"Macedonian\", langCode: \"mk\", flagCode: \"MK\" },\n  { name: \"Malay\", langCode: \"ms\", flagCode: \"MY\" },\n  { name: \"Malayalam\", langCode: \"ml\", flagCode: \"IN\" },\n  { name: \"Maltese\", langCode: \"mt\", flagCode: \"MT\" },\n  { name: \"Marathi\", langCode: \"mr\", flagCode: \"IN\" },\n  { name: \"Mongolian\", langCode: \"mn\", flagCode: \"MN\" },\n  { name: \"Norwegian\", langCode: \"no\", flagCode: \"NO\" },\n  { name: \"Pashto\", langCode: \"ps\", flagCode: \"IR\" },\n  { name: \"Polish\", langCode: \"pl\", flagCode: \"PL\" },\n  { name: \"Portuguese (Brazil)\", langCode: \"pt\", flagCode: \"BR\" },\n  { name: \"Portuguese (Portugal)\", langCode: \"pt-PT\", flagCode: \"PT\" },\n  { name: \"Punjabi\", langCode: \"pa\", flagCode: \"\" },\n  { name: \"Romanian\", langCode: \"ro\", flagCode: \"RO\" },\n  { name: \"Russian\", langCode: \"ru\", flagCode: \"RU\" },\n  { name: \"Serbian\", langCode: \"sr\", flagCode: \"RS\" },\n  { name: \"Sinhala\", langCode: \"si\", flagCode: \"\" },\n  { name: \"Slovak\", langCode: \"sk\", flagCode: \"SK\" },\n  { name: \"Slovenian\", langCode: \"sl\", flagCode: \"SI\" },\n  { name: \"Somali\", langCode: \"so\", flagCode: \"SO\" },\n  { name: \"Spanish\", langCode: \"es\", flagCode: \"ES\" },\n  { name: \"Spanish (Mexico)\", langCode: \"es-MX\", flagCode: \"MX\" },\n  { name: \"Swahili\", langCode: \"sw\", flagCode: \"KE\" },\n  { name: \"Swedish\", langCode: \"sv\", flagCode: \"SE\" },\n  { name: \"Tamil\", langCode: \"ta\", flagCode: \"\" },\n  { name: \"Telugu\", langCode: \"te\", flagCode: \"\" },\n  { name: \"Thai\", langCode: \"th\", flagCode: \"TH\" },\n  { name: \"Turkish\", langCode: \"tr\", flagCode: \"TR\" },\n  { name: \"Ukrainian\", langCode: \"uk\", flagCode: \"UA\" },\n  { name: \"Urdu\", langCode: \"ur\", flagCode: \"\" },\n  { name: \"Uzbek\", langCode: \"uz\", flagCode: \"UZ\" },\n  { name: \"Vietnamese\", langCode: \"vi\", flagCode: \"VN\" },\n  { name: \"Welsh\", langCode: \"cy\", flagCode: \"GB-WLS\" },\n];\n", "import { ActionFunction, LoaderFunction, redirect } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, Outlet, useLoaderData } from \"@remix-run/react\";\n\nimport { getUser } from \"~/services/session.server\";\nimport {\n  createTranslationForUser,\n  getTranslationsByUser,\n} from \"~/services/translation.server\";\n\ntype LoaderData = {\n  bookmarks: Awaited<ReturnType<typeof getTranslationsByUser>>;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request);\n  const bookmarks = await getTranslationsByUser(user!.id, user!.accessToken);\n\n  return json<LoaderData>({ bookmarks });\n};\n\nexport let action: ActionFunction = async ({ request }) => {\n  const user = await getUser(request);\n\n  const form = await request.formData();\n  const id = form.get(\"id\") as string;\n  const bookmarkId = form.get(\"bookmarkId\") as string;\n  const text = form.get(\"text\") as string;\n  const sourceLangCode = form.get(\"sourceLangCode\") as string;\n\n  if (id == null || id == '') {\n    const result = await createTranslationForUser(user!.id, {\n      bookmarkId,\n      sourceLangCode: sourceLangCode,\n      targetLangCode: user?.sourceLangPreference || \"en\",\n      sourceLangText: text,\n    });\n    // throw new Error(JSON.stringify(result))\n  }\n\n  return redirect(`/bookmarks`);\n};\n\nexport default function BookmarksPage() {\n  const data = useLoaderData() as LoaderData;\n\n  return (\n    <div className=\"flex h-full min-h-screen flex-col\">\n      <header className=\"flex items-center justify-between bg-slate-800 p-4 text-white\">\n        <h1 className=\"text-3xl font-bold\">\n          <Link to=\".\">Bookmarks</Link>\n        </h1>\n      </header>\n\n      <main className=\"flex h-full bg-white\">\n        <div className=\"h-full w-80 border-r bg-gray-50\">\n          {data.bookmarks.map((bookmark) => {\n            return (\n              <Form key={bookmark.id} method=\"post\">\n                <input type=\"text\" name=\"id\" value={bookmark.id} />\n                <input\n                  type=\"text\"\n                  name=\"bookmarkId\"\n                  value={bookmark.bookmarkId}\n                />\n                <input\n                  type=\"text\"\n                  name=\"sourceLangCode\"\n                  value={bookmark.sourceLangCode}\n                />\n                <input\n                  type=\"text\"\n                  name=\"text\"\n                  value={bookmark.sourceLangText}\n                />\n                {bookmark.bookmarkId}\n                {bookmark.sourceLangText}\n                {bookmark.targetLangCode}\n                {bookmark.targetLangText}\n                <input type=\"submit\" value=\"Submit\" />\n              </Form>\n            );\n          })}\n        </div>\n\n        <div className=\"flex-1 p-6\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n}\n", "import type { Translation } from \"~/models/translation.server\";\nimport type { SessionUser } from \"~/models/user.server\";\nimport {\n  createTranslation,\n  getTranslationListItems,\n} from \"~/models/translation.server\";\nimport { getUserById } from \"~/models/user.server\";\nimport { getTranslationForLanguage } from \"./translator.server\";\nimport { getBookmarksByUser } from \"./twitter.server\";\nimport sanitizeTweet from \"~/utils/sanitizeTweet\";\n\nexport interface BookmarkTranslation extends Translation {}\n\nexport async function getTranslationsByUser(\n  userId: SessionUser[\"id\"],\n  accessToken: string\n): Promise<BookmarkTranslation[]> {\n  try {\n    const { data: twitterBookmarks } = await getBookmarksByUser(\n      userId,\n      accessToken\n    );\n\n    const [user, translations] = await Promise.all([\n      getUserById(userId),\n      getTranslationListItems(userId),\n    ]);\n\n    if (!Array.isArray(twitterBookmarks)) {\n      return [];\n    }\n\n    return twitterBookmarks\n      .map((item) => {\n        const translation = translations.find(\n          (trans) => trans.bookmarkId == item.id\n        );\n\n        if (!translation) {\n          const convert: BookmarkTranslation = {\n            id: null as unknown as string,\n            bookmarkId: item.id,\n            userId: userId,\n            sourceLangText: sanitizeTweet(item.text),\n            targetLangText: \"\",\n            sourceLangCode: item.lang,\n            targetLangCode: user?.sourceLangPreference ?? \"en\",\n            completed: false,\n          };\n\n          return convert;\n        }\n\n        return translation;\n      })\n      .filter((item) => item != null);\n  } catch (err) {\n    throw err;\n  }\n}\n\nexport async function createTranslationForUser(\n  userId: SessionUser[\"id\"],\n  options: {\n    sourceLangText: string;\n    sourceLangCode: string;\n    targetLangCode: string;\n    bookmarkId: string;\n  }\n) {\n  try {\n    const targetLangText = await getTranslationForLanguage({\n      sourceLangCode: options.sourceLangCode,\n      targetLangCode: options.targetLangCode,\n      text: options.sourceLangText,\n    });\n\n    if (targetLangText != undefined) {\n      return await createTranslation({\n        sourceLangCode: options.sourceLangCode,\n        targetLangCode: options.targetLangCode,\n        bookmarkId: options.bookmarkId,\n        sourceLangText: options.sourceLangText,\n        targetLangText: targetLangText,\n        completed: false,\n        userId,\n      });\n    }\n\n    throw new Error(\"Failed to get target language\");\n  } catch (err) {\n    throw err;\n  }\n}\n", "import { TranslateClient, TranslateTextCommand } from \"@aws-sdk/client-translate\";\nimport { fromNodeProviderChain } from \"@aws-sdk/credential-providers\"\n\ninterface GetTranslationOptions {\n    text: string\n    sourceLangCode: string\n    targetLangCode: string\n}\n\nconst region = process.env.AWS_TRANSLATE_REGION\n\nexport async function getTranslationForLanguage(options: GetTranslationOptions): Promise<string | undefined> {\n    try {\n        const credentials = fromNodeProviderChain({\n            profile: 'sandbox',\n        });\n\n        const client = new TranslateClient({ \n          region,\n          credentials,\n        });\n\n        const command = new TranslateTextCommand({\n            SourceLanguageCode: options.sourceLangCode,\n            TargetLanguageCode: options.targetLangCode,\n            Text: options.text,\n        });\n    \n        const response = await client.send(command)\n\n        return response.TranslatedText\n    } catch (err) {\n        throw err\n    }\n}", "import type { SessionUser } from \"~/models/user.server\"\n\ninterface TwitterBookmark {\n  id: string;\n  lang: string;\n  text: string;\n}\n\ninterface TwitterBookmarkResponse {\n  data: TwitterBookmark[];\n  result_count: number;\n}\n\nexport async function getBookmarksByUser(userId: SessionUser['id'], accessToken: string): Promise<TwitterBookmarkResponse> {\n    const url = new URL(`https://api.twitter.com/2/users/${userId.replace('id#', '')}/bookmarks?tweet.fields=lang&user.fields=profile_image_url,name`)\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`\n      }\n    })\n\n    const json: TwitterBookmarkResponse = await response.json()\n\n    return json\n}", "function stripEmbeddedAnchors(str: string): string {\n  return str.replace(/(?:https):\\/\\/[\\n\\S/\"]+/gimu, \" \");\n}\n\nfunction sanitizeTweet(tweet: string) {\n  return stripEmbeddedAnchors(tweet).trim();\n}\n\nexport default sanitizeTweet;\n", "import { ActionFunction, json } from \"@remix-run/node\";\nimport { setSourceLangPreference } from \"~/models/user.server\";\nimport { getUser } from \"~/services/session.server\";\n\nexport let action: ActionFunction = async ({ request }) => {\n  const user = await getUser(request);\n  const requestBody = await request.json();\n\n  const sourceLangPreference = requestBody.sourceLangPreference\n\n  if (sourceLangPreference) {\n    const hasSet = await setSourceLangPreference(user!.id.replace('id#', ''), sourceLangPreference)\n\n    if (hasSet) {\n      return json(`Preference ${sourceLangPreference} set for ${user!.id.replace('id#', '')}`, { status: 200 })\n    }\n  }\n\n  return json('Preference not set', { status: 500 })\n};\n", "// app/routes/login.callback.tsx\nimport type { LoaderFunction } from \"@remix-run/node\";\nimport { authenticator } from \"~/services/auth.server\";\n\n// This will be called after twitter auth page\nexport let loader: LoaderFunction = async ({ request }) => {\n  await authenticator.authenticate(\"twitter\", request, {\n    successRedirect: \"/dashboard\",\n    failureRedirect: \"/login/failure\",\n  });\n};\n", "// app/services/auth.server.ts\nimport { Authenticator } from \"remix-auth\";\nimport { TwitterOAuth2Strategy } from \"~/auth/TwitterOAuth2Strategy\";\nimport type { User } from \"~/models/user.server\";\nimport { findOrCreateFromTwitter } from \"~/models/user.server\";\nimport { sessionStorage } from \"~/services/session.server\";\n\n// Create an instance of the authenticator, pass a generic with what\n// strategies will return and will store in the session\nexport let authenticator = new Authenticator<User>(sessionStorage);\n\nconst clientID = process.env.TWITTER_CONSUMER_KEY;\nconst clientSecret = process.env.TWITTER_CONSUMER_SECRET;\n\nif (!clientID || !clientSecret) {\n  throw new Error(\n    \"TWITTER_CONSUMER_KEY and TWITTER_CONSUMER_SECRET must be provided\"\n  );\n}\n\nauthenticator.use(\n  new TwitterOAuth2Strategy(\n    {\n      authorizationURL: \"https://twitter.com/i/oauth2/authorize\",\n      tokenURL: \"https://api.twitter.com/2/oauth2/token\",\n      clientID,\n      clientSecret,\n      callbackURL: \"http://localhost:3000/login/callback\",\n      scope: 'bookmark.read tweet.read users.read'\n    },\n    async ({ accessToken, refreshToken, profile }) => {\n      return await findOrCreateFromTwitter({\n        profile: profile,\n        accessToken,\n      });\n    },\n  ),\n  // each strategy has a name and can be changed to use another one\n  // same strategy multiple times, especially useful for the OAuth2 strategy.\n  \"twitter\"\n);\n", "import type {\n  AppLoadContext,\n  SessionStorage} from \"@remix-run/server-runtime\";\nimport {\n  json,\n  redirect\n} from \"@remix-run/server-runtime\";\nimport type {\n  AuthenticateOptions,\n  StrategyVerifyCallback} from \"remix-auth\";\nimport {\n  Strategy\n} from \"remix-auth\";\nimport { v4 as uuid } from \"uuid\";\n\nlet debug = (...val: any) => console.log('debug', ...val)\n\nexport interface OAuth2Profile {\n  provider: string;\n  id?: string;\n  displayName?: string;\n  name?: {\n    familyName?: string;\n    givenName?: string;\n    middleName?: string;\n  };\n  emails?: Array<{\n    value: string;\n    type?: string;\n  }>;\n  photos?: Array<{ value: string }>;\n}\n\nexport interface OAuth2StrategyOptions {\n  authorizationURL: string;\n  tokenURL: string;\n  clientID: string;\n  clientSecret: string;\n  callbackURL: string;\n  scope: string;\n  confidential?: boolean;\n}\n\nexport interface OAuth2StrategyVerifyParams<\n  Profile extends OAuth2Profile,\n  ExtraParams extends Record<string, unknown> = Record<string, never>\n> {\n  accessToken: string;\n  refreshToken: string;\n  extraParams: ExtraParams;\n  profile: Profile;\n  context?: AppLoadContext;\n}\n\n/**\n * The OAuth 2.0 authentication strategy authenticates requests using the OAuth\n * 2.0 framework.\n *\n * OAuth 2.0 provides a facility for delegated authentication, whereby users can\n * authenticate using a third-party service such as Facebook.  Delegating in\n * this manner involves a sequence of events, including redirecting the user to\n * the third-party service for authorization.  Once authorization has been\n * granted, the user is redirected back to the application and an authorization\n * code can be used to obtain credentials.\n *\n * Applications must supply a `verify` callback, for which the function\n * signature is:\n *\n *     function(accessToken, refreshToken, profile) { ... }\n *\n * The verify callback is responsible for finding or creating the user, and\n * returning the resulting user object.\n *\n * An AuthorizationError should be raised to indicate an authentication failure.\n *\n * Options:\n * - `authorizationURL`  URL used to obtain an authorization grant\n * - `tokenURL`          URL used to obtain an access token\n * - `clientID`          identifies client to service provider\n * - `clientSecret`      secret used to establish ownership of the client identifier\n * - `callbackURL`       URL to which the service provider will redirect the user after obtaining authorization\n *\n * @example\n * authenticator.use(new OAuth2Strategy(\n *   {\n *     authorizationURL: 'https://www.example.com/oauth2/authorize',\n *     tokenURL: 'https://www.example.com/oauth2/token',\n *     clientID: '123-456-789',\n *     clientSecret: 'shhh-its-a-secret'\n *     callbackURL: 'https://www.example.net/auth/example/callback'\n *   },\n *   async ({ accessToken, refreshToken, profile }) => {\n *     return await User.findOrCreate(...);\n *   }\n * ));\n */\nexport class TwitterOAuth2Strategy<\n  User,\n  Profile extends OAuth2Profile,\n  ExtraParams extends Record<string, unknown> = Record<string, never>\n> extends Strategy<User, OAuth2StrategyVerifyParams<Profile, ExtraParams>> {\n  name = \"oauth2\";\n\n  protected authorizationURL: string;\n  protected tokenURL: string;\n  protected clientID: string;\n  protected clientSecret: string;\n  protected callbackURL: string;\n  protected scope: string;\n  protected confidential: boolean;\n\n  private sessionStateKey = \"oauth2:state\";\n\n  constructor(\n    options: OAuth2StrategyOptions,\n    verify: StrategyVerifyCallback<\n      User,\n      OAuth2StrategyVerifyParams<Profile, ExtraParams>\n    >\n  ) {\n    super(verify);\n    this.authorizationURL = options.authorizationURL;\n    this.tokenURL = options.tokenURL;\n    this.clientID = options.clientID;\n    this.clientSecret = options.clientSecret;\n    this.callbackURL = options.callbackURL;\n    this.scope = options.scope;\n    this.confidential = options.confidential ?? false;\n  }\n\n  async authenticate(\n    request: Request,\n    sessionStorage: SessionStorage,\n    options: AuthenticateOptions\n  ): Promise<User> {\n    debug(\"Request URL\", request.url);\n    let url = new URL(request.url);\n    let session = await sessionStorage.getSession(\n      request.headers.get(\"Cookie\")\n    );\n\n    let user: User | null = session.get(options.sessionKey) ?? null;\n\n    // User is already authenticated\n    if (user) {\n      debug(\"User is authenticated\");\n      return this.success(user, request, sessionStorage, options);\n    }\n\n    let callbackURL = this.getCallbackURL(url);\n    let challenge = this.generateChallenge();\n\n    debug(\"Callback URL\", callbackURL);\n\n    // Redirect the user to the callback URL\n    if (url.pathname !== callbackURL.pathname) {\n      debug(\"Redirecting to callback URL\");\n      let state = this.generateState();\n      debug(\"State\", state);\n      session.set(this.sessionStateKey, state);\n      throw redirect(this.getAuthorizationURL(request, state, challenge).toString(), {\n        headers: { \n            \"Set-Cookie\": await sessionStorage.commitSession(session),\n            'Authorization': `Basic ${this.getConfidentialHeader()}`\n        },\n      });\n    }\n\n    // Validations of the callback URL params\n\n    let stateUrl = url.searchParams.get(\"state\");\n    debug(\"State from URL\", stateUrl);\n    if (!stateUrl)\n      throw json({ message: \"Missing state on URL.\" }, { status: 400 });\n\n    let stateSession = session.get(this.sessionStateKey);\n    debug(\"State from session\", stateSession);\n    if (!stateSession) {\n      throw json({ message: \"Missing state on session.\" }, { status: 400 });\n    }\n\n    if (stateSession === stateUrl) {\n      debug(\"State is valid\");\n      session.unset(this.sessionStateKey);\n    } else throw json({ message: \"State doesn't match.\" }, { status: 400 });\n\n    let code = url.searchParams.get(\"code\");\n    if (!code) throw json({ message: \"Missing code.\" }, { status: 400 });\n\n    // Get the access token\n\n    let params = new URLSearchParams(this.tokenParams());\n    params.set(\"grant_type\", \"authorization_code\");\n    params.set(\"redirect_uri\", callbackURL.toString());\n\n    let { accessToken, refreshToken, extraParams } =\n      await this.fetchAccessToken(code, params, challenge);\n\n    // Get the profile\n    let profile = await this.userProfile(accessToken, extraParams);\n\n    // Verify the user and return it, or redirect\n    try {\n      user = await this.verify({\n        accessToken,\n        refreshToken,\n        extraParams,\n        profile,\n        context: options.context,\n      });\n    } catch (error) {\n      debug(\"Failed to verify user\", error);\n      let message = (error as Error).message;\n      return await this.failure(message, request, sessionStorage, options);\n    }\n    \n    debug(\"User authenticated\");\n    return await this.success(user, request, sessionStorage, options);\n  }\n\n  private getConfidentialHeader() {\n    return Buffer.from(`${this.clientID}:${this.clientSecret}`).toString('base64')\n  }\n\n  /**\n   * Retrieve user profile from service provider.\n   *\n   * OAuth 2.0-based authentication strategies can override this function in\n   * order to load the user's profile from the service provider.  This assists\n   * applications (and users of those applications) in the initial registration\n   * process by automatically submitting required information.\n   */\n  protected async userProfile(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    accessToken: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    params: ExtraParams\n  ): Promise<Profile> {\n    const url = new URL('https://api.twitter.com/2/users/me')\n    url.searchParams.append('user.fields', 'id,name,username,profile_image_url')\n\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: {\n        \"Authorization\": `Bearer ${accessToken}`\n      }\n    })\n\n    const json = await response.json()\n\n    return { \n      provider: \"oauth2\",\n      displayName: json.data.name,\n      id: json.data.id,\n      name: json.data.username,\n      photos: [{ value: json.data.profile_image_url }]\n    } as Profile;\n  }\n\n  /**\n   * Return extra parameters to be included in the authorization request.\n   *\n   * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n   * included when requesting authorization.  Since these parameters are not\n   * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n   * strategies can override this function in order to populate these\n   * parameters as required by the provider.\n   */\n  protected authorizationParams(params: URLSearchParams): URLSearchParams {\n    return new URLSearchParams(params);\n  }\n\n  /**\n   * Return extra parameters to be included in the token request.\n   *\n   * Some OAuth 2.0 providers allow additional, non-standard parameters to be\n   * included when requesting an access token.  Since these parameters are not\n   * standardized by the OAuth 2.0 specification, OAuth 2.0-based authentication\n   * strategies can override this function in order to populate these\n   * parameters as required by the provider.\n   */\n  protected tokenParams(): URLSearchParams {\n    return new URLSearchParams();\n  }\n\n  protected async getAccessToken(response: Response): Promise<{\n    accessToken: string;\n    refreshToken: string;\n    extraParams: ExtraParams;\n  }> {\n    let { access_token, refresh_token, ...extraParams } = await response.json();\n    return {\n      accessToken: access_token as string,\n      refreshToken: refresh_token as string,\n      extraParams,\n    } as const;\n  }\n\n  private getCallbackURL(url: URL) {\n    if (\n      this.callbackURL.startsWith(\"http:\") ||\n      this.callbackURL.startsWith(\"https:\")\n    ) {\n      return new URL(this.callbackURL);\n    }\n    if (this.callbackURL.startsWith(\"/\")) {\n      return new URL(this.callbackURL, url);\n    }\n    return new URL(`${url.protocol}//${this.callbackURL}`);\n  }\n\n  private getAuthorizationURL(request: Request, state: string, challenge: string) {\n    let params = new URLSearchParams(\n      this.authorizationParams(new URL(request.url).searchParams)\n    );\n    params.set(\"response_type\", \"code\");\n    params.set(\"client_id\", this.clientID);\n    params.set(\n      \"redirect_uri\",\n      this.getCallbackURL(new URL(request.url)).toString()\n    );\n    params.set(\"state\", state);\n    params.set(\"scope\", this.scope);\n    params.set(\"code_challenge\", challenge);\n    params.set(\"code_challenge_method\", \"plain\");\n\n    let url = new URL(this.authorizationURL);\n    url.search = params.toString();\n\n    return url;\n  }\n\n  private generateState() {\n    return uuid();\n  }\n\n  private generateChallenge() {\n    return \"challenge\";\n  }\n\n  /**\n   * Format the data to be sent in the request body to the token endpoint.\n   */\n  private async fetchAccessToken(\n    code: string,\n    params: URLSearchParams,\n    codeVerifier: string,\n  ): Promise<{\n    accessToken: string;\n    refreshToken: string;\n    extraParams: ExtraParams;\n  }> {\n    params.set(\"client_id\", this.clientID);\n    params.set(\"client_secret\", this.clientSecret);\n    params.set(\"code_verifier\", codeVerifier)\n\n    if (params.get(\"grant_type\") === \"refresh_token\") {\n      params.set(\"refresh_token\", code);\n    } else {\n      params.set(\"code\", code);\n    }\n\n    let response = await fetch(this.tokenURL, {\n      method: \"POST\",\n      headers: { \n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Authorization\": `Basic ${this.getConfidentialHeader()}`\n      },\n      body: params,\n    });\n\n    if (!response.ok) {\n      try {\n        let body = await response.text();\n        throw new Response(body, { status: 401 });\n      } catch (error) {\n        throw new Response((error as Error).message, { status: 401 });\n      }\n    }\n\n    return await this.getAccessToken(response.clone() as unknown as Response);\n  }\n}\n", "import { ActionFunction, LoaderFunction, redirect } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { Form, Link, Outlet, useLoaderData, useSubmit } from \"@remix-run/react\";\nimport { useMemo, useState } from \"react\";\nimport TranslationItem from \"~/components/dashboard/TranslationItem\";\nimport { languages } from \"~/constants/languages\";\nimport { Translation } from \"~/models/translation.server\";\nimport { SessionUser } from \"~/models/user.server\";\n\nimport { getUser } from \"~/services/session.server\";\nimport {\n  createTranslationForUser,\n  getTranslationsByUser,\n} from \"~/services/translation.server\";\n\ntype LoaderData = {\n  translations: Awaited<ReturnType<typeof getTranslationsByUser>>;\n  user: SessionUser | null;\n};\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await getUser(request);\n  const translations = await getTranslationsByUser(user!.id, user!.accessToken);\n\n  return json<LoaderData>({ translations, user });\n};\n\nexport let action: ActionFunction = async ({ request }) => {\n  const user = await getUser(request);\n\n  const form = await request.formData();\n  const id = form.get(\"id\") as string;\n  const bookmarkId = form.get(\"bookmarkId\") as string;\n  const text = form.get(\"text\") as string;\n  const sourceLangCode = form.get(\"sourceLangCode\") as string;\n  const targetLangCode = form.get(\"targetLangCode\") as string;\n\n  if (id == null || id == \"\") {\n    const result = await createTranslationForUser(user!.id, {\n      bookmarkId,\n      sourceLangCode: sourceLangCode,\n      targetLangCode: targetLangCode ?? user?.sourceLangPreference,\n      sourceLangText: text,\n    });\n    return redirect(`/translate/${result.id}`);\n  }\n\n  return redirect(`/translate/${id}`);\n};\n\nexport default function Dashboard() {\n  const data = useLoaderData() as LoaderData;\n\n  const [showCompleted, setShowCompleted] = useState<boolean>(false);\n  const [sourceLangPreference, setSourceLangPreference] = useState<string>(\n    data.user!.sourceLangPreference\n  );\n\n  const translations = useMemo(() => {\n    if (showCompleted) {\n      return data.translations.filter((translation) => translation.completed);\n    }\n    return data.translations.filter((translation) => !translation.completed);\n  }, [showCompleted]);\n\n  async function onPreferredLanguageChange(\n    event: React.ChangeEvent<HTMLSelectElement>\n  ) {\n    try {\n      await fetch(\"/user/preference\", {\n        method: \"POST\",\n        body: JSON.stringify({ sourceLangPreference: event.target.value }),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      setSourceLangPreference(event.target.value);\n    } catch (err) {}\n  }\n\n  return (\n    <div className=\"relative min-h-screen bg-blue-900\">\n      <nav className=\"flex container mx-auto\">\n        <div className=\"flex w-full bg-blue-900 p-4\">\n          <div className=\"flex w-full align-center justify-between\">\n            <div>\n              <img className=\"rounded-full\" src={data.user?.profile?.photos?.[0].value ?? ''} alt=\"twitter profile\" />\n            </div>\n            <div className=\"flex\">\n              <div className=\"self-center mr-3\">\n                <img className=\"rounded-md\" src={`/_static/icons/${sourceLangPreference.toUpperCase()}.svg`} />\n              </div>\n              <select\n                className=\"rounded-md border border-blue-400 px-3 py-2 self-center bg-blue-900 text-blue-300\"\n                name=\"preferredLanguage\"\n                defaultValue={sourceLangPreference}\n                onChange={onPreferredLanguageChange}\n                style={{ width: '125px' }}\n              >\n                <option>Please select a language...</option>\n                {languages.map(function ({ name, langCode }) {\n                  return (\n                    <option key={langCode} value={langCode}>\n                      {name}\n                    </option>\n                  );\n                })}\n              </select>\n            </div>\n          </div>\n        </div>\n      </nav>\n      \n      <main className=\"container mx-auto px-4\">\n        <div className=\"py-4 grid gap-2 grid-cols-2\">\n          <button className={`text-blue-200 p-2 hover:bg-blue-800 rounded-md ${!showCompleted && 'bg-blue-700'}`} onClick={() => setShowCompleted(false)}>\n            Todo \uD83D\uDC40\n          </button>\n          <button className={`text-blue-200 p-2 hover:bg-blue-800 rounded-md ${showCompleted && 'bg-blue-700'}`} onClick={() => setShowCompleted(true)}>\n            Done \u2705\n          </button>\n        </div>\n\n        {data.translations.length > 0 ? (\n          <div>\n            <div className=\"grid gap-3\">\n              {translations.map((translation) => (\n                <TranslationItem\n                  translation={translation}\n                  targetLang={sourceLangPreference}\n                  key={translation.bookmarkId}\n                />\n              ))}\n            </div>\n          </div>\n        ) : (\n          <p className=\"text-white text-center\">No bookmarks saved. You can bookmark a tweet to see it here.</p>\n        )}\n      </main>\n    </div>\n  );\n}\n", "import type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { redirect } from \"@remix-run/node\";\n\nimport { logout } from \"~/services/session.server\";\n\nexport const action: ActionFunction = async ({ request }) => {\n  return logout(request);\n};\n\nexport const loader: LoaderFunction = async () => {\n  return redirect(\"/\");\n};\n", "import { Form } from \"@remix-run/react\";\n\nimport { useOptionalUser } from \"~/utils\";\n\nexport default function Index() {\n  const user = useOptionalUser();\n  return (\n    <main className=\"relative min-h-screen bg-blue-900 sm:flex sm:items-center sm:justify-center\">\n      <div className=\"relative sm:pb-16 sm:pt-8\">\n        <div className=\"mx-auto max-w-7xl sm:px-6 lg:px-8\">\n          {/** Main */}\n          <div className=\"relative sm:overflow-hidden\">\n            <div className=\"relative px-5 py-8 flex flex-col align-center\">\n              <div className=\"text-center mb-6\">\n                <h1 className=\"font-bold text-white text-3xl md:text-5xl\">\n                  Bookmark, Translate, Learn\n                </h1>\n              </div>\n              <div className=\"mb-8 md:max-w-2xl max-w-md\" style={{ alignSelf: 'center' }}>\n                <p className=\"text-blue-200 text-center md:text-xl\">\n                  We accelerate your language learning by <strong>translating your bookmarked \n                  tweets</strong> and seeing if you can translate the tweets!\n                </p>\n              </div>\n              <div className=\"mx-auto max-w-sm sm:flex sm:max-w-none justify-center\">\n                {user ? (\n                  <div>logged in</div>\n                ) : (\n                  <Form method=\"post\" action=\"/login\">\n                    <button className=\"uppercase flex items-center justify-center rounded-md border border-none bg-green-600 px-4 py-3 text-sm md:text-lg font-bold text-white shadow-sm hover:bg-green-700 sm:px-8\">\n                      Login with Twitter\n                    </button>\n                  </Form>\n                )}\n              </div>\n            </div>\n          </div>\n          {/** End Main */}\n        </div>\n      </div>\n    </main>\n  );\n}\n", "import { useMatches } from \"@remix-run/react\";\nimport { useMemo } from \"react\";\n\nimport type { SessionUser } from \"~/models/user.server\";\n\nconst DEFAULT_REDIRECT = \"/\";\n\n/**\n * This should be used any time the redirect path is user-provided\n * (Like the query string on our login/signup pages). This avoids\n * open-redirect vulnerabilities.\n * @param {string} to The redirect destination\n * @param {string} defaultRedirect The redirect to use if the to is unsafe.\n */\nexport function safeRedirect(\n  to: FormDataEntryValue | string | null | undefined,\n  defaultRedirect: string = DEFAULT_REDIRECT\n) {\n  if (!to || typeof to !== \"string\") {\n    return defaultRedirect;\n  }\n\n  if (!to.startsWith(\"/\") || to.startsWith(\"//\")) {\n    return defaultRedirect;\n  }\n\n  return to;\n}\n\n/**\n * This base hook is used in other hooks to quickly search for specific data\n * across all loader data using useMatches.\n * @param {string} id The route id\n * @returns {JSON|undefined} The router data or undefined if not found\n */\nexport function useMatchesData(\n  id: string\n): Record<string, unknown> | undefined {\n  const matchingRoutes = useMatches();\n  const route = useMemo(\n    () => matchingRoutes.find((route) => route.id === id),\n    [matchingRoutes, id]\n  );\n  return route?.data;\n}\n\nfunction isUser(user: any): user is SessionUser {\n  return user && typeof user === \"object\" && typeof user.id === \"string\";\n}\n\nexport function useOptionalUser(): SessionUser | undefined {\n  const data = useMatchesData(\"root\");\n  if (!data || !isUser(data.user)) {\n    return undefined;\n  }\n  return data.user;\n}\n\nexport function useUser(): SessionUser {\n  const maybeUser = useOptionalUser();\n  if (!maybeUser) {\n    throw new Error(\n      \"No user found in root loader, but user is required by useUser. If user is optional, try useOptionalUser instead.\"\n    );\n  }\n  return maybeUser;\n}\n\nexport function validateEmail(email: unknown): email is string {\n  return typeof email === \"string\" && email.length > 3 && email.includes(\"@\");\n}\n", "// app/routes/login.tsx\nimport type { ActionFunction } from \"@remix-run/node\";\nimport { Form } from \"@remix-run/react\";\nimport { authenticator } from \"~/services/auth.server\";\n\n// Normally this will redirect user to twitter auth page\nexport let action: ActionFunction = async ({ request }) => {\n  await authenticator.authenticate(\"twitter\", request, {\n    successRedirect: \"/dashboard\", // Destination in case the user is already logged in\n  });\n};\n\nexport default function LoginPage() {\n  return (\n    <div className=\"flex h-full min-h-screen flex-col\">\n      <Form method=\"post\" action=\"/login\">\n        <button>Login</button>\n      </Form>\n    </div>\n  );\n}\n", "export default {'version':'f4ab00c2','entry':{'module':'/_static/build/entry.client-G7VABPMY.js','imports':['/_static/build/_shared/chunk-3CQS43I2.js','/_static/build/_shared/chunk-O6YYFGCX.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/_static/build/root-JI6R2DGJ.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/bookmarks/index':{'id':'routes/bookmarks/index','parentId':'root','path':'bookmarks','index':true,'caseSensitive':undefined,'module':'/_static/build/routes/bookmarks/index-JN4KFJD2.js','imports':['/_static/build/_shared/chunk-RFMQLDOI.js','/_static/build/_shared/chunk-E6HE4FUV.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/dashboard':{'id':'routes/dashboard','parentId':'root','path':'dashboard','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/dashboard-HBGSQDZS.js','imports':['/_static/build/_shared/chunk-FJYIZYP6.js','/_static/build/_shared/chunk-RFMQLDOI.js','/_static/build/_shared/chunk-E6HE4FUV.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/_static/build/routes/index-SKIDTFIJ.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/login-4ZDZVX6G.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/login.callback':{'id':'routes/login.callback','parentId':'root','path':'login/callback','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/login.callback-THH2ON6C.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/logout':{'id':'routes/logout','parentId':'root','path':'logout','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/logout-LOK6OPER.js','imports':undefined,'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/translate/$translateId':{'id':'routes/translate/$translateId','parentId':'root','path':'translate/:translateId','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/translate/$translateId-37TCWPXJ.js','imports':['/_static/build/_shared/chunk-FJYIZYP6.js','/_static/build/_shared/chunk-E6HE4FUV.js'],'hasAction':true,'hasLoader':true,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/user/preference':{'id':'routes/user/preference','parentId':'root','path':'user/preference','index':undefined,'caseSensitive':undefined,'module':'/_static/build/routes/user/preference-7FJSST7O.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/_static/build/manifest-F4AB00C2.js'};"],
  "mappings": "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",
  "names": []
}
